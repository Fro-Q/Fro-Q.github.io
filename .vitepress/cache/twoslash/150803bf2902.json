{"code":"import { createContentLoader } from 'vitepress'\n\n// ...\n\nexport interface Data {\n  // ...\n  tags: string[]\n}\n\ndeclare const data: Data[]\nexport { data }\n\nfunction dealTagHierarchy(tag: string): string[] {\n  const tags = new Set<string>()\n  const levels = tag.split('/')\n  levels.forEach((_: string, i: number) => {\n    tags.add(levels.slice(0, i + 1).join('/'))\n  })\n\n  return Array.from(tags)\n}\n\nfunction getTags(html: string | undefined, frontmatter: Record<string, any>): string[] {\n  if (!html) {\n    return []\n  }\n\n  const tags: Set<string> = new Set()\n  const tagReg = /<a href=\"\\/tags\\/[^\"]*\">\\s*<span class=\"tag\">(.*?)<\\/span>\\s*<\\/a>/g\n  let match: RegExpExecArray | null = tagReg.exec(html)\n\n  while (match) {\n    tags.add(match[1])\n    dealTagHierarchy(match[1]).forEach(tag => tags.add(tag))\n    match = tagReg.exec(html)\n  }\n\n  if (frontmatter.tags) {\n    for (const tag of frontmatter.tags) {\n      dealTagHierarchy(tag).forEach(tag => tags.add(tag))\n    }\n  }\n\n  return Array.from(tags)\n}\n\nexport default createContentLoader('posts/**/*.md', {\n  // ...\n  render: true,\n  transform(raw) {\n    return raw.map(({ html, url, frontmatter, excerpt, src }) => ({\n      // ...\n      tags: getTags(html, frontmatter),\n    }))\n    // ...\n  },\n})","nodes":[{"type":"hover","text":"(alias) function createContentLoader<T = ContentData[]>(pattern: string | string[], { includeSrc, render, excerpt: renderExcerpt, transform, globOptions }?: ContentOptions<T>): {\n    watch: string | string[];\n    load: () => Promise<T>;\n}\nimport createContentLoader","docs":"Create a loader object that can be directly used as the default export\nof a data loader file.","start":9,"length":19,"target":"createContentLoader","line":0,"character":9},{"type":"hover","text":"interface Data","start":74,"length":4,"target":"Data","line":4,"character":17},{"type":"hover","text":"(property) Data.tags: string[]","start":92,"length":4,"target":"tags","line":6,"character":2},{"type":"hover","text":"const data: Data[]","start":124,"length":4,"target":"data","line":9,"character":14},{"type":"hover","text":"interface Data","start":130,"length":4,"target":"Data","line":9,"character":20},{"type":"hover","text":"(alias) const data: Data[]\nexport data","start":146,"length":4,"target":"data","line":10,"character":9},{"type":"hover","text":"function dealTagHierarchy(tag: string): string[]","start":163,"length":16,"target":"dealTagHierarchy","line":12,"character":9},{"type":"hover","text":"(parameter) tag: string","start":180,"length":3,"target":"tag","line":12,"character":26},{"type":"hover","text":"const tags: Set<string>","start":213,"length":4,"target":"tags","line":13,"character":8},{"type":"hover","text":"var Set: SetConstructor\nnew <string>(iterable?: Iterable<string> | null | undefined) => Set<string> (+1 overload)","start":224,"length":3,"target":"Set","line":13,"character":19},{"type":"hover","text":"const levels: string[]","start":246,"length":6,"target":"levels","line":14,"character":8},{"type":"hover","text":"(parameter) tag: string","start":255,"length":3,"target":"tag","line":14,"character":17},{"type":"hover","text":"(method) String.split(separator: string | RegExp, limit?: number): string[] (+1 overload)","docs":"Split a string into substrings using the specified separator and return them as an array.","tags":[["param","separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned."],["param","limit A value used to limit the number of elements returned in the array."]],"start":259,"length":5,"target":"split","line":14,"character":21},{"type":"hover","text":"const levels: string[]","start":272,"length":6,"target":"levels","line":15,"character":2},{"type":"hover","text":"(method) Array<string>.forEach(callbackfn: (value: string, index: number, array: string[]) => void, thisArg?: any): void","docs":"Performs the specified action for each element in an array.","tags":[["param","callbackfn A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array."],["param","thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value."]],"start":279,"length":7,"target":"forEach","line":15,"character":9},{"type":"hover","text":"(parameter) _: string","start":288,"length":1,"target":"_","line":15,"character":18},{"type":"hover","text":"(parameter) i: number","start":299,"length":1,"target":"i","line":15,"character":29},{"type":"hover","text":"const tags: Set<string>","start":319,"length":4,"target":"tags","line":16,"character":4},{"type":"hover","text":"(method) Set<string>.add(value: string): Set<string>","docs":"Appends a new element with a specified value to the end of the Set.","start":324,"length":3,"target":"add","line":16,"character":9},{"type":"hover","text":"const levels: string[]","start":328,"length":6,"target":"levels","line":16,"character":13},{"type":"hover","text":"(method) Array<string>.slice(start?: number, end?: number): string[]","docs":"Returns a copy of a section of an array.\nFor both start and end, a negative index can be used to indicate an offset from the end of the array.\nFor example, -2 refers to the second to last element of the array.","tags":[["param","start The beginning index of the specified portion of the array.\nIf start is undefined, then the slice begins at index 0."],["param","end The end index of the specified portion of the array. This is exclusive of the element at the index 'end'.\nIf end is undefined, then the slice extends to the end of the array."]],"start":335,"length":5,"target":"slice","line":16,"character":20},{"type":"hover","text":"(parameter) i: number","start":344,"length":1,"target":"i","line":16,"character":29},{"type":"hover","text":"(method) Array<string>.join(separator?: string): string","docs":"Adds all the elements of an array into a string, separated by the specified separator string.","tags":[["param","separator A string used to separate one element of the array from the next in the resulting string. If omitted, the array elements are separated with a comma."]],"start":351,"length":4,"target":"join","line":16,"character":36},{"type":"hover","text":"var Array: ArrayConstructor","start":377,"length":5,"target":"Array","line":19,"character":9},{"type":"hover","text":"(method) ArrayConstructor.from<string>(iterable: Iterable<string> | ArrayLike<string>): string[] (+3 overloads)","docs":"Creates an array from an iterable object.","tags":[["param","iterable An iterable object to convert to an array."]],"start":383,"length":4,"target":"from","line":19,"character":15},{"type":"hover","text":"const tags: Set<string>","start":388,"length":4,"target":"tags","line":19,"character":20},{"type":"hover","text":"function getTags(html: string | undefined, frontmatter: Record<string, any>): string[]","start":406,"length":7,"target":"getTags","line":22,"character":9},{"type":"hover","text":"(parameter) html: string | undefined","start":414,"length":4,"target":"html","line":22,"character":17},{"type":"hover","text":"(parameter) frontmatter: Record<string, any>","start":440,"length":11,"target":"frontmatter","line":22,"character":43},{"type":"hover","text":"type Record<K extends keyof any, T> = { [P in K]: T; }","docs":"Construct a type with a set of properties K of type T","start":453,"length":6,"target":"Record","line":22,"character":56},{"type":"hover","text":"(parameter) html: string | undefined","start":493,"length":4,"target":"html","line":23,"character":7},{"type":"hover","text":"const tags: Set<string>","start":528,"length":4,"target":"tags","line":27,"character":8},{"type":"hover","text":"interface Set<T>","start":534,"length":3,"target":"Set","line":27,"character":14},{"type":"hover","text":"var Set: SetConstructor\nnew <string>(iterable?: Iterable<string> | null | undefined) => Set<string> (+1 overload)","start":552,"length":3,"target":"Set","line":27,"character":32},{"type":"hover","text":"const tagReg: RegExp","start":566,"length":6,"target":"tagReg","line":28,"character":8},{"type":"hover","text":"let match: RegExpExecArray | null","start":651,"length":5,"target":"match","line":29,"character":6},{"type":"hover","text":"interface RegExpExecArray","start":658,"length":15,"target":"RegExpExecArray","line":29,"character":13},{"type":"hover","text":"const tagReg: RegExp","start":683,"length":6,"target":"tagReg","line":29,"character":38},{"type":"hover","text":"(method) RegExp.exec(string: string): RegExpExecArray | null","docs":"Executes a search on a string using a regular expression pattern, and returns an array containing the results of that search.","tags":[["param","string The String object or string literal on which to perform the search."]],"start":690,"length":4,"target":"exec","line":29,"character":45},{"type":"hover","text":"(parameter) html: string","start":695,"length":4,"target":"html","line":29,"character":50},{"type":"hover","text":"let match: RegExpExecArray | null","start":711,"length":5,"target":"match","line":31,"character":9},{"type":"hover","text":"const tags: Set<string>","start":724,"length":4,"target":"tags","line":32,"character":4},{"type":"hover","text":"(method) Set<string>.add(value: string): Set<string>","docs":"Appends a new element with a specified value to the end of the Set.","start":729,"length":3,"target":"add","line":32,"character":9},{"type":"hover","text":"let match: RegExpExecArray","start":733,"length":5,"target":"match","line":32,"character":13},{"type":"hover","text":"function dealTagHierarchy(tag: string): string[]","start":747,"length":16,"target":"dealTagHierarchy","line":33,"character":4},{"type":"hover","text":"let match: RegExpExecArray","start":764,"length":5,"target":"match","line":33,"character":21},{"type":"hover","text":"(method) Array<string>.forEach(callbackfn: (value: string, index: number, array: string[]) => void, thisArg?: any): void","docs":"Performs the specified action for each element in an array.","tags":[["param","callbackfn A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array."],["param","thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value."]],"start":774,"length":7,"target":"forEach","line":33,"character":31},{"type":"hover","text":"(parameter) tag: string","start":782,"length":3,"target":"tag","line":33,"character":39},{"type":"hover","text":"const tags: Set<string>","start":789,"length":4,"target":"tags","line":33,"character":46},{"type":"hover","text":"(method) Set<string>.add(value: string): Set<string>","docs":"Appends a new element with a specified value to the end of the Set.","start":794,"length":3,"target":"add","line":33,"character":51},{"type":"hover","text":"(parameter) tag: string","start":798,"length":3,"target":"tag","line":33,"character":55},{"type":"hover","text":"let match: RegExpExecArray | null","start":808,"length":5,"target":"match","line":34,"character":4},{"type":"hover","text":"const tagReg: RegExp","start":816,"length":6,"target":"tagReg","line":34,"character":12},{"type":"hover","text":"(method) RegExp.exec(string: string): RegExpExecArray | null","docs":"Executes a search on a string using a regular expression pattern, and returns an array containing the results of that search.","tags":[["param","string The String object or string literal on which to perform the search."]],"start":823,"length":4,"target":"exec","line":34,"character":19},{"type":"hover","text":"(parameter) html: string","start":828,"length":4,"target":"html","line":34,"character":24},{"type":"hover","text":"(parameter) frontmatter: Record<string, any>","start":845,"length":11,"target":"frontmatter","line":37,"character":6},{"type":"hover","text":"any","start":857,"length":4,"target":"tags","line":37,"character":18},{"type":"hover","text":"const tag: any","start":880,"length":3,"target":"tag","line":38,"character":15},{"type":"hover","text":"(parameter) frontmatter: Record<string, any>","start":887,"length":11,"target":"frontmatter","line":38,"character":22},{"type":"hover","text":"any","start":899,"length":4,"target":"tags","line":38,"character":34},{"type":"hover","text":"function dealTagHierarchy(tag: string): string[]","start":913,"length":16,"target":"dealTagHierarchy","line":39,"character":6},{"type":"hover","text":"const tag: any","start":930,"length":3,"target":"tag","line":39,"character":23},{"type":"hover","text":"(method) Array<string>.forEach(callbackfn: (value: string, index: number, array: string[]) => void, thisArg?: any): void","docs":"Performs the specified action for each element in an array.","tags":[["param","callbackfn A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array."],["param","thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value."]],"start":935,"length":7,"target":"forEach","line":39,"character":28},{"type":"hover","text":"(parameter) tag: string","start":943,"length":3,"target":"tag","line":39,"character":36},{"type":"hover","text":"const tags: Set<string>","start":950,"length":4,"target":"tags","line":39,"character":43},{"type":"hover","text":"(method) Set<string>.add(value: string): Set<string>","docs":"Appends a new element with a specified value to the end of the Set.","start":955,"length":3,"target":"add","line":39,"character":48},{"type":"hover","text":"(parameter) tag: string","start":959,"length":3,"target":"tag","line":39,"character":52},{"type":"hover","text":"var Array: ArrayConstructor","start":985,"length":5,"target":"Array","line":43,"character":9},{"type":"hover","text":"(method) ArrayConstructor.from<string>(iterable: Iterable<string> | ArrayLike<string>): string[] (+3 overloads)","docs":"Creates an array from an iterable object.","tags":[["param","iterable An iterable object to convert to an array."]],"start":991,"length":4,"target":"from","line":43,"character":15},{"type":"hover","text":"const tags: Set<string>","start":996,"length":4,"target":"tags","line":43,"character":20},{"type":"hover","text":"(alias) createContentLoader<{\n    tags: string[];\n}[]>(pattern: string | string[], { includeSrc, render, excerpt: renderExcerpt, transform, globOptions }?: ContentOptions<{\n    tags: string[];\n}[]> | undefined): {\n    watch: string | string[];\n    load: () => Promise<{\n        tags: string[];\n    }[]>;\n}\nimport createContentLoader","docs":"Create a loader object that can be directly used as the default export\nof a data loader file.","start":1020,"length":19,"target":"createContentLoader","line":46,"character":15},{"type":"hover","text":"(property) ContentOptions<T = ContentData[]>.render?: boolean | undefined","docs":"Render src to HTML and include in data?","tags":[["default","false"]],"start":1070,"length":6,"target":"render","line":48,"character":2},{"type":"hover","text":"(property) ContentOptions<{ tags: string[]; }[]>.transform?: ((data: ContentData[]) => {\n    tags: string[];\n}[] | Promise<{\n    tags: string[];\n}[]>) | undefined","docs":"Transform the data. Note the data will be inlined as JSON in the client\nbundle if imported from components or markdown files.","start":1086,"length":9,"target":"transform","line":49,"character":2},{"type":"hover","text":"(parameter) raw: ContentData[]","start":1096,"length":3,"target":"raw","line":49,"character":12},{"type":"hover","text":"(parameter) raw: ContentData[]","start":1114,"length":3,"target":"raw","line":50,"character":11},{"type":"hover","text":"(method) Array<ContentData>.map<{\n    tags: string[];\n}>(callbackfn: (value: ContentData, index: number, array: ContentData[]) => {\n    tags: string[];\n}, thisArg?: any): {\n    tags: string[];\n}[]","docs":"Calls a defined callback function on each element of an array, and returns an array that contains the results.","tags":[["param","callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array."],["param","thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value."]],"start":1118,"length":3,"target":"map","line":50,"character":15},{"type":"hover","text":"(parameter) html: string | undefined","start":1125,"length":4,"target":"html","line":50,"character":22},{"type":"hover","text":"(parameter) url: string","start":1131,"length":3,"target":"url","line":50,"character":28},{"type":"hover","text":"(parameter) frontmatter: Record<string, any>","start":1136,"length":11,"target":"frontmatter","line":50,"character":33},{"type":"hover","text":"(parameter) excerpt: string | undefined","start":1149,"length":7,"target":"excerpt","line":50,"character":46},{"type":"hover","text":"(parameter) src: string | undefined","start":1158,"length":3,"target":"src","line":50,"character":55},{"type":"hover","text":"(property) tags: string[]","start":1190,"length":4,"target":"tags","line":52,"character":6},{"type":"hover","text":"function getTags(html: string | undefined, frontmatter: Record<string, any>): string[]","start":1196,"length":7,"target":"getTags","line":52,"character":12},{"type":"hover","text":"(parameter) html: string | undefined","start":1204,"length":4,"target":"html","line":52,"character":20},{"type":"hover","text":"(parameter) frontmatter: Record<string, any>","start":1210,"length":11,"target":"frontmatter","line":52,"character":26}],"meta":{"extension":"ts","compilerOptions":{"strict":true,"module":99,"target":99,"allowJs":true,"skipDefaultLibCheck":true,"skipLibCheck":true,"moduleDetection":3,"baseUrl":"/Users/jayqing/Areas/blog_example/typescript_example_site/","moduleResolution":100},"handbookOptions":{"errors":[],"noErrors":false,"noErrorsCutted":false,"noErrorValidation":false,"noStaticSemanticInfo":false,"showEmit":false,"keepNotations":false},"removals":[],"flagNotations":[],"virtualFiles":[{"offset":0,"filename":"index.ts","filepath":"/Users/jayqing/Areas/blog_example/typescript_example_site/index.ts","content":"import { createContentLoader } from 'vitepress'\n\n// ...\n\nexport interface Data {\n  // ...\n  tags: string[]\n}\n\ndeclare const data: Data[]\nexport { data }\n\nfunction dealTagHierarchy(tag: string): string[] {\n  const tags = new Set<string>()\n  const levels = tag.split('/')\n  levels.forEach((_: string, i: number) => {\n    tags.add(levels.slice(0, i + 1).join('/'))\n  })\n\n  return Array.from(tags)\n}\n\nfunction getTags(html: string | undefined, frontmatter: Record<string, any>): string[] {\n  if (!html) {\n    return []\n  }\n\n  const tags: Set<string> = new Set()\n  const tagReg = /<a href=\"\\/tags\\/[^\"]*\">\\s*<span class=\"tag\">(.*?)<\\/span>\\s*<\\/a>/g\n  let match: RegExpExecArray | null = tagReg.exec(html)\n\n  while (match) {\n    tags.add(match[1])\n    dealTagHierarchy(match[1]).forEach(tag => tags.add(tag))\n    match = tagReg.exec(html)\n  }\n\n  if (frontmatter.tags) {\n    for (const tag of frontmatter.tags) {\n      dealTagHierarchy(tag).forEach(tag => tags.add(tag))\n    }\n  }\n\n  return Array.from(tags)\n}\n\nexport default createContentLoader('posts/**/*.md', {\n  // ...\n  render: true,\n  transform(raw) {\n    return raw.map(({ html, url, frontmatter, excerpt, src }) => ({\n      // ...\n      tags: getTags(html, frontmatter),\n    }))\n    // ...\n  },\n})","extension":"ts","supportLsp":true}],"positionQueries":[],"positionCompletions":[],"positionHighlights":[]},"queries":[],"completions":[],"errors":[],"highlights":[],"hovers":[{"type":"hover","text":"(alias) function createContentLoader<T = ContentData[]>(pattern: string | string[], { includeSrc, render, excerpt: renderExcerpt, transform, globOptions }?: ContentOptions<T>): {\n    watch: string | string[];\n    load: () => Promise<T>;\n}\nimport createContentLoader","docs":"Create a loader object that can be directly used as the default export\nof a data loader file.","start":9,"length":19,"target":"createContentLoader","line":0,"character":9},{"type":"hover","text":"interface Data","start":74,"length":4,"target":"Data","line":4,"character":17},{"type":"hover","text":"(property) Data.tags: string[]","start":92,"length":4,"target":"tags","line":6,"character":2},{"type":"hover","text":"const data: Data[]","start":124,"length":4,"target":"data","line":9,"character":14},{"type":"hover","text":"interface Data","start":130,"length":4,"target":"Data","line":9,"character":20},{"type":"hover","text":"(alias) const data: Data[]\nexport data","start":146,"length":4,"target":"data","line":10,"character":9},{"type":"hover","text":"function dealTagHierarchy(tag: string): string[]","start":163,"length":16,"target":"dealTagHierarchy","line":12,"character":9},{"type":"hover","text":"(parameter) tag: string","start":180,"length":3,"target":"tag","line":12,"character":26},{"type":"hover","text":"const tags: Set<string>","start":213,"length":4,"target":"tags","line":13,"character":8},{"type":"hover","text":"var Set: SetConstructor\nnew <string>(iterable?: Iterable<string> | null | undefined) => Set<string> (+1 overload)","start":224,"length":3,"target":"Set","line":13,"character":19},{"type":"hover","text":"const levels: string[]","start":246,"length":6,"target":"levels","line":14,"character":8},{"type":"hover","text":"(parameter) tag: string","start":255,"length":3,"target":"tag","line":14,"character":17},{"type":"hover","text":"(method) String.split(separator: string | RegExp, limit?: number): string[] (+1 overload)","docs":"Split a string into substrings using the specified separator and return them as an array.","tags":[["param","separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned."],["param","limit A value used to limit the number of elements returned in the array."]],"start":259,"length":5,"target":"split","line":14,"character":21},{"type":"hover","text":"const levels: string[]","start":272,"length":6,"target":"levels","line":15,"character":2},{"type":"hover","text":"(method) Array<string>.forEach(callbackfn: (value: string, index: number, array: string[]) => void, thisArg?: any): void","docs":"Performs the specified action for each element in an array.","tags":[["param","callbackfn A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array."],["param","thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value."]],"start":279,"length":7,"target":"forEach","line":15,"character":9},{"type":"hover","text":"(parameter) _: string","start":288,"length":1,"target":"_","line":15,"character":18},{"type":"hover","text":"(parameter) i: number","start":299,"length":1,"target":"i","line":15,"character":29},{"type":"hover","text":"const tags: Set<string>","start":319,"length":4,"target":"tags","line":16,"character":4},{"type":"hover","text":"(method) Set<string>.add(value: string): Set<string>","docs":"Appends a new element with a specified value to the end of the Set.","start":324,"length":3,"target":"add","line":16,"character":9},{"type":"hover","text":"const levels: string[]","start":328,"length":6,"target":"levels","line":16,"character":13},{"type":"hover","text":"(method) Array<string>.slice(start?: number, end?: number): string[]","docs":"Returns a copy of a section of an array.\nFor both start and end, a negative index can be used to indicate an offset from the end of the array.\nFor example, -2 refers to the second to last element of the array.","tags":[["param","start The beginning index of the specified portion of the array.\nIf start is undefined, then the slice begins at index 0."],["param","end The end index of the specified portion of the array. This is exclusive of the element at the index 'end'.\nIf end is undefined, then the slice extends to the end of the array."]],"start":335,"length":5,"target":"slice","line":16,"character":20},{"type":"hover","text":"(parameter) i: number","start":344,"length":1,"target":"i","line":16,"character":29},{"type":"hover","text":"(method) Array<string>.join(separator?: string): string","docs":"Adds all the elements of an array into a string, separated by the specified separator string.","tags":[["param","separator A string used to separate one element of the array from the next in the resulting string. If omitted, the array elements are separated with a comma."]],"start":351,"length":4,"target":"join","line":16,"character":36},{"type":"hover","text":"var Array: ArrayConstructor","start":377,"length":5,"target":"Array","line":19,"character":9},{"type":"hover","text":"(method) ArrayConstructor.from<string>(iterable: Iterable<string> | ArrayLike<string>): string[] (+3 overloads)","docs":"Creates an array from an iterable object.","tags":[["param","iterable An iterable object to convert to an array."]],"start":383,"length":4,"target":"from","line":19,"character":15},{"type":"hover","text":"const tags: Set<string>","start":388,"length":4,"target":"tags","line":19,"character":20},{"type":"hover","text":"function getTags(html: string | undefined, frontmatter: Record<string, any>): string[]","start":406,"length":7,"target":"getTags","line":22,"character":9},{"type":"hover","text":"(parameter) html: string | undefined","start":414,"length":4,"target":"html","line":22,"character":17},{"type":"hover","text":"(parameter) frontmatter: Record<string, any>","start":440,"length":11,"target":"frontmatter","line":22,"character":43},{"type":"hover","text":"type Record<K extends keyof any, T> = { [P in K]: T; }","docs":"Construct a type with a set of properties K of type T","start":453,"length":6,"target":"Record","line":22,"character":56},{"type":"hover","text":"(parameter) html: string | undefined","start":493,"length":4,"target":"html","line":23,"character":7},{"type":"hover","text":"const tags: Set<string>","start":528,"length":4,"target":"tags","line":27,"character":8},{"type":"hover","text":"interface Set<T>","start":534,"length":3,"target":"Set","line":27,"character":14},{"type":"hover","text":"var Set: SetConstructor\nnew <string>(iterable?: Iterable<string> | null | undefined) => Set<string> (+1 overload)","start":552,"length":3,"target":"Set","line":27,"character":32},{"type":"hover","text":"const tagReg: RegExp","start":566,"length":6,"target":"tagReg","line":28,"character":8},{"type":"hover","text":"let match: RegExpExecArray | null","start":651,"length":5,"target":"match","line":29,"character":6},{"type":"hover","text":"interface RegExpExecArray","start":658,"length":15,"target":"RegExpExecArray","line":29,"character":13},{"type":"hover","text":"const tagReg: RegExp","start":683,"length":6,"target":"tagReg","line":29,"character":38},{"type":"hover","text":"(method) RegExp.exec(string: string): RegExpExecArray | null","docs":"Executes a search on a string using a regular expression pattern, and returns an array containing the results of that search.","tags":[["param","string The String object or string literal on which to perform the search."]],"start":690,"length":4,"target":"exec","line":29,"character":45},{"type":"hover","text":"(parameter) html: string","start":695,"length":4,"target":"html","line":29,"character":50},{"type":"hover","text":"let match: RegExpExecArray | null","start":711,"length":5,"target":"match","line":31,"character":9},{"type":"hover","text":"const tags: Set<string>","start":724,"length":4,"target":"tags","line":32,"character":4},{"type":"hover","text":"(method) Set<string>.add(value: string): Set<string>","docs":"Appends a new element with a specified value to the end of the Set.","start":729,"length":3,"target":"add","line":32,"character":9},{"type":"hover","text":"let match: RegExpExecArray","start":733,"length":5,"target":"match","line":32,"character":13},{"type":"hover","text":"function dealTagHierarchy(tag: string): string[]","start":747,"length":16,"target":"dealTagHierarchy","line":33,"character":4},{"type":"hover","text":"let match: RegExpExecArray","start":764,"length":5,"target":"match","line":33,"character":21},{"type":"hover","text":"(method) Array<string>.forEach(callbackfn: (value: string, index: number, array: string[]) => void, thisArg?: any): void","docs":"Performs the specified action for each element in an array.","tags":[["param","callbackfn A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array."],["param","thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value."]],"start":774,"length":7,"target":"forEach","line":33,"character":31},{"type":"hover","text":"(parameter) tag: string","start":782,"length":3,"target":"tag","line":33,"character":39},{"type":"hover","text":"const tags: Set<string>","start":789,"length":4,"target":"tags","line":33,"character":46},{"type":"hover","text":"(method) Set<string>.add(value: string): Set<string>","docs":"Appends a new element with a specified value to the end of the Set.","start":794,"length":3,"target":"add","line":33,"character":51},{"type":"hover","text":"(parameter) tag: string","start":798,"length":3,"target":"tag","line":33,"character":55},{"type":"hover","text":"let match: RegExpExecArray | null","start":808,"length":5,"target":"match","line":34,"character":4},{"type":"hover","text":"const tagReg: RegExp","start":816,"length":6,"target":"tagReg","line":34,"character":12},{"type":"hover","text":"(method) RegExp.exec(string: string): RegExpExecArray | null","docs":"Executes a search on a string using a regular expression pattern, and returns an array containing the results of that search.","tags":[["param","string The String object or string literal on which to perform the search."]],"start":823,"length":4,"target":"exec","line":34,"character":19},{"type":"hover","text":"(parameter) html: string","start":828,"length":4,"target":"html","line":34,"character":24},{"type":"hover","text":"(parameter) frontmatter: Record<string, any>","start":845,"length":11,"target":"frontmatter","line":37,"character":6},{"type":"hover","text":"any","start":857,"length":4,"target":"tags","line":37,"character":18},{"type":"hover","text":"const tag: any","start":880,"length":3,"target":"tag","line":38,"character":15},{"type":"hover","text":"(parameter) frontmatter: Record<string, any>","start":887,"length":11,"target":"frontmatter","line":38,"character":22},{"type":"hover","text":"any","start":899,"length":4,"target":"tags","line":38,"character":34},{"type":"hover","text":"function dealTagHierarchy(tag: string): string[]","start":913,"length":16,"target":"dealTagHierarchy","line":39,"character":6},{"type":"hover","text":"const tag: any","start":930,"length":3,"target":"tag","line":39,"character":23},{"type":"hover","text":"(method) Array<string>.forEach(callbackfn: (value: string, index: number, array: string[]) => void, thisArg?: any): void","docs":"Performs the specified action for each element in an array.","tags":[["param","callbackfn A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array."],["param","thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value."]],"start":935,"length":7,"target":"forEach","line":39,"character":28},{"type":"hover","text":"(parameter) tag: string","start":943,"length":3,"target":"tag","line":39,"character":36},{"type":"hover","text":"const tags: Set<string>","start":950,"length":4,"target":"tags","line":39,"character":43},{"type":"hover","text":"(method) Set<string>.add(value: string): Set<string>","docs":"Appends a new element with a specified value to the end of the Set.","start":955,"length":3,"target":"add","line":39,"character":48},{"type":"hover","text":"(parameter) tag: string","start":959,"length":3,"target":"tag","line":39,"character":52},{"type":"hover","text":"var Array: ArrayConstructor","start":985,"length":5,"target":"Array","line":43,"character":9},{"type":"hover","text":"(method) ArrayConstructor.from<string>(iterable: Iterable<string> | ArrayLike<string>): string[] (+3 overloads)","docs":"Creates an array from an iterable object.","tags":[["param","iterable An iterable object to convert to an array."]],"start":991,"length":4,"target":"from","line":43,"character":15},{"type":"hover","text":"const tags: Set<string>","start":996,"length":4,"target":"tags","line":43,"character":20},{"type":"hover","text":"(alias) createContentLoader<{\n    tags: string[];\n}[]>(pattern: string | string[], { includeSrc, render, excerpt: renderExcerpt, transform, globOptions }?: ContentOptions<{\n    tags: string[];\n}[]> | undefined): {\n    watch: string | string[];\n    load: () => Promise<{\n        tags: string[];\n    }[]>;\n}\nimport createContentLoader","docs":"Create a loader object that can be directly used as the default export\nof a data loader file.","start":1020,"length":19,"target":"createContentLoader","line":46,"character":15},{"type":"hover","text":"(property) ContentOptions<T = ContentData[]>.render?: boolean | undefined","docs":"Render src to HTML and include in data?","tags":[["default","false"]],"start":1070,"length":6,"target":"render","line":48,"character":2},{"type":"hover","text":"(property) ContentOptions<{ tags: string[]; }[]>.transform?: ((data: ContentData[]) => {\n    tags: string[];\n}[] | Promise<{\n    tags: string[];\n}[]>) | undefined","docs":"Transform the data. Note the data will be inlined as JSON in the client\nbundle if imported from components or markdown files.","start":1086,"length":9,"target":"transform","line":49,"character":2},{"type":"hover","text":"(parameter) raw: ContentData[]","start":1096,"length":3,"target":"raw","line":49,"character":12},{"type":"hover","text":"(parameter) raw: ContentData[]","start":1114,"length":3,"target":"raw","line":50,"character":11},{"type":"hover","text":"(method) Array<ContentData>.map<{\n    tags: string[];\n}>(callbackfn: (value: ContentData, index: number, array: ContentData[]) => {\n    tags: string[];\n}, thisArg?: any): {\n    tags: string[];\n}[]","docs":"Calls a defined callback function on each element of an array, and returns an array that contains the results.","tags":[["param","callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array."],["param","thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value."]],"start":1118,"length":3,"target":"map","line":50,"character":15},{"type":"hover","text":"(parameter) html: string | undefined","start":1125,"length":4,"target":"html","line":50,"character":22},{"type":"hover","text":"(parameter) url: string","start":1131,"length":3,"target":"url","line":50,"character":28},{"type":"hover","text":"(parameter) frontmatter: Record<string, any>","start":1136,"length":11,"target":"frontmatter","line":50,"character":33},{"type":"hover","text":"(parameter) excerpt: string | undefined","start":1149,"length":7,"target":"excerpt","line":50,"character":46},{"type":"hover","text":"(parameter) src: string | undefined","start":1158,"length":3,"target":"src","line":50,"character":55},{"type":"hover","text":"(property) tags: string[]","start":1190,"length":4,"target":"tags","line":52,"character":6},{"type":"hover","text":"function getTags(html: string | undefined, frontmatter: Record<string, any>): string[]","start":1196,"length":7,"target":"getTags","line":52,"character":12},{"type":"hover","text":"(parameter) html: string | undefined","start":1204,"length":4,"target":"html","line":52,"character":20},{"type":"hover","text":"(parameter) frontmatter: Record<string, any>","start":1210,"length":11,"target":"frontmatter","line":52,"character":26}],"tags":[]}