{"code":"<script setup lang=\"ts\">\nimport { onMounted, ref, triggerRef } from 'vue'\n\nconst htmlEl: HTMLElement | null = document.querySelector('html')\n\nconst darkMode = ref({\n  get state(): boolean {\n    return htmlEl.classList.contains('dark')\n  },\n\n  set state(value: boolean) {\n    toggleDarkClass(value)\n  },\n})\n\nfunction toggleDarkClass(value: boolean) {\n  if (value) {\n    htmlEl.classList.add('dark')\n  }\n  else {\n    htmlEl.classList.remove('dark')\n  }\n}\n</script>\n\n<!-- ... -->","nodes":[{"type":"hover","text":"(alias) const onMounted: CreateHook<any>\nimport onMounted","start":34,"length":9,"target":"onMounted","line":1,"character":9},{"type":"hover","text":"(alias) function ref<T>(value: T): [T] extends [Ref] ? IfAny<T, Ref<T>, T> : Ref<UnwrapRef<T>, UnwrapRef<T> | T> (+1 overload)\nimport ref","docs":"Takes an inner value and returns a reactive and mutable ref object, which\nhas a single property `.value` that points to the inner value.","tags":[["param","value - The object to wrap in the ref."],["see","{@link https://vuejs.org/api/reactivity-core.html#ref}"]],"start":45,"length":3,"target":"ref","line":1,"character":20},{"type":"hover","text":"(alias) function triggerRef(ref: Ref): void\nimport triggerRef","docs":"Force trigger effects that depends on a shallow ref. This is typically used\nafter making deep mutations to the inner value of a shallow ref.","tags":[["example","```js\nconst shallow = shallowRef({\n  greet: 'Hello, world'\n})\n\n// Logs \"Hello, world\" once for the first run-through\nwatchEffect(() => {\n  console.log(shallow.value.greet)\n})\n\n// This won't trigger the effect because the ref is shallow\nshallow.value.greet = 'Hello, universe'\n\n// Logs \"Hello, universe\"\ntriggerRef(shallow)\n```"],["param","ref - The ref whose tied effects shall be executed."],["see","{@link https://vuejs.org/api/reactivity-advanced.html#triggerref}"]],"start":50,"length":10,"target":"triggerRef","line":1,"character":25},{"type":"hover","text":"const htmlEl: HTMLElement | null","start":81,"length":6,"target":"htmlEl","line":3,"character":6},{"type":"query","text":"const htmlEl: HTMLElement | null","start":81,"length":6,"target":"htmlEl","line":3,"character":6},{"type":"hover","text":"interface HTMLElement","docs":"Any HTML element. Some elements directly implement this interface, while others implement it via an interface that inherits it.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement)","start":89,"length":11,"target":"HTMLElement","line":3,"character":14},{"type":"hover","text":"var document: Document","docs":"[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/document)","start":110,"length":8,"target":"document","line":3,"character":35},{"type":"hover","text":"(method) ParentNode.querySelector<\"html\">(selectors: \"html\"): HTMLHtmlElement | null (+4 overloads)","docs":"Returns the first element that is a descendant of node that matches selectors.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/querySelector)","start":119,"length":13,"target":"querySelector","line":3,"character":44},{"type":"hover","text":"const darkMode: Ref<{\n    state: boolean;\n}, {\n    state: boolean;\n} | {\n    state: boolean;\n}>","start":148,"length":8,"target":"darkMode","line":5,"character":6},{"type":"hover","text":"(alias) ref<{\n    state: boolean;\n}>(value: {\n    state: boolean;\n}): Ref<{\n    state: boolean;\n}, {\n    state: boolean;\n} | {\n    state: boolean;\n}> (+1 overload)\nimport ref","docs":"Takes an inner value and returns a reactive and mutable ref object, which\nhas a single property `.value` that points to the inner value.","tags":[["param","value - The object to wrap in the ref."],["see","{@link https://vuejs.org/api/reactivity-core.html#ref}"]],"start":159,"length":3,"target":"ref","line":5,"character":17},{"type":"hover","text":"(getter) state: boolean","start":171,"length":5,"target":"state","line":6,"character":6},{"type":"error","start":201,"length":6,"code":18047,"filename":"index.tsx","id":"err-18047-278-6","text":"'htmlEl' is possibly 'null'.","level":"error","line":7,"character":11,"target":"htmlEl"},{"type":"hover","text":"const htmlEl: HTMLElement | null","start":201,"length":6,"target":"htmlEl","line":7,"character":11},{"type":"hover","text":"(property) Element.classList: DOMTokenList","docs":"Allows for manipulation of element's class content attribute as a set of whitespace-separated tokens through a DOMTokenList object.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/classList)","start":208,"length":9,"target":"classList","line":7,"character":18},{"type":"hover","text":"(method) DOMTokenList.contains(token: string): boolean","docs":"Returns true if token is present, and false otherwise.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMTokenList/contains)","start":218,"length":8,"target":"contains","line":7,"character":28},{"type":"hover","text":"(setter) state: boolean","start":247,"length":5,"target":"state","line":10,"character":6},{"type":"hover","text":"(parameter) value: boolean","start":253,"length":5,"target":"value","line":10,"character":12},{"type":"hover","text":"function toggleDarkClass(value: boolean): void","start":275,"length":15,"target":"toggleDarkClass","line":11,"character":4},{"type":"hover","text":"(parameter) value: boolean","start":291,"length":5,"target":"value","line":11,"character":20},{"type":"hover","text":"function toggleDarkClass(value: boolean): void","start":316,"length":15,"target":"toggleDarkClass","line":15,"character":9},{"type":"hover","text":"(parameter) value: boolean","start":332,"length":5,"target":"value","line":15,"character":25},{"type":"hover","text":"(parameter) value: boolean","start":356,"length":5,"target":"value","line":16,"character":6},{"type":"error","start":369,"length":6,"code":18047,"filename":"index.tsx","id":"err-18047-446-6","text":"'htmlEl' is possibly 'null'.","level":"error","line":17,"character":4,"target":"htmlEl"},{"type":"hover","text":"const htmlEl: HTMLElement | null","start":369,"length":6,"target":"htmlEl","line":17,"character":4},{"type":"hover","text":"(property) Element.classList: DOMTokenList","docs":"Allows for manipulation of element's class content attribute as a set of whitespace-separated tokens through a DOMTokenList object.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/classList)","start":376,"length":9,"target":"classList","line":17,"character":11},{"type":"hover","text":"(method) DOMTokenList.add(...tokens: string[]): void","docs":"Adds all arguments passed, except those already present.\n\nThrows a \"SyntaxError\" DOMException if one of the arguments is the empty string.\n\nThrows an \"InvalidCharacterError\" DOMException if one of the arguments contains any ASCII whitespace.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMTokenList/add)","start":386,"length":3,"target":"add","line":17,"character":21},{"type":"error","start":415,"length":6,"code":18047,"filename":"index.tsx","id":"err-18047-492-6","text":"'htmlEl' is possibly 'null'.","level":"error","line":20,"character":4,"target":"htmlEl"},{"type":"hover","text":"const htmlEl: HTMLElement | null","start":415,"length":6,"target":"htmlEl","line":20,"character":4},{"type":"hover","text":"(property) Element.classList: DOMTokenList","docs":"Allows for manipulation of element's class content attribute as a set of whitespace-separated tokens through a DOMTokenList object.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/classList)","start":422,"length":9,"target":"classList","line":20,"character":11},{"type":"hover","text":"(method) DOMTokenList.remove(...tokens: string[]): void","docs":"Removes arguments passed, if they are present.\n\nThrows a \"SyntaxError\" DOMException if one of the arguments is the empty string.\n\nThrows an \"InvalidCharacterError\" DOMException if one of the arguments contains any ASCII whitespace.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMTokenList/remove)","start":432,"length":6,"target":"remove","line":20,"character":21}],"meta":{"extension":"vue","compilerOptions":{"strict":true,"module":99,"target":99,"allowJs":true,"skipDefaultLibCheck":true,"skipLibCheck":true,"moduleDetection":3,"baseUrl":"/Users/jayqing/Areas/blog_example/typescript_example_site/","jsx":1,"jsxImportSource":"vue","noImplicitAny":false,"moduleResolution":100},"handbookOptions":{"errors":[18047],"noErrors":false,"noErrorsCutted":true,"noErrorValidation":false,"noStaticSemanticInfo":false,"showEmit":false,"keepNotations":true},"removals":[[159,168],[25,43]],"flagNotations":[],"virtualFiles":[{"offset":0,"filename":"index.tsx","filepath":"/Users/jayqing/Areas/blog_example/typescript_example_site/index.tsx","content":"/// <reference types=\"./node_modules/.vue-global-types/vue_3.5_0.d.ts\" />\n\n                 \nimport { onMounted, ref, triggerRef } from 'vue'\n\nconst htmlEl: HTMLElement | null = document.querySelector('html')\n        \n\nconst darkMode = ref({\n  get state(): boolean {\n    return htmlEl.classList.contains('dark')\n  },\n\n  set state(value: boolean) {\n    toggleDarkClass(value)\n  },\n})\n\nfunction toggleDarkClass(value: boolean) {\n  if (value) {\n    htmlEl.classList.add('dark')\n  }\n  else {\n    htmlEl.classList.remove('dark')\n  }\n}\ndebugger/* PartiallyEnd: #3632/scriptSetup.vue */\n// @ts-ignore\ndeclare const { defineProps, defineSlots, defineEmits, defineExpose, defineModel, defineOptions, withDefaults, }: typeof import('vue');\ntype __VLS_PublicProps = {};\nconst __VLS_ctx = {} as InstanceType<__VLS_PickNotAny<typeof __VLS_self, new () => {}>>;\nlet __VLS_elements!: __VLS_IntrinsicElements;\ntype __VLS_LocalComponents = typeof __VLS_ctx;\nlet __VLS_components!: __VLS_LocalComponents & __VLS_GlobalComponents;\ntype __VLS_LocalDirectives = typeof __VLS_ctx;\nlet __VLS_directives!: __VLS_LocalDirectives & __VLS_GlobalDirectives;\ntype __VLS_Slots = {};\ntype __VLS_InheritedAttrs = {};\ntype __VLS_TemplateRefs = {};\ntype __VLS_RootEl = any;\nconst __VLS_self = (await import('vue')).defineComponent({\nsetup: () => ({\n}),\n});\nexport default (await import('vue')).defineComponent({\n});\n;/* PartiallyEnd: #4569/main.vue */\n","extension":"tsx","supportLsp":true}],"positionQueries":[149],"positionCompletions":[],"positionHighlights":[]},"queries":[{"type":"query","text":"const htmlEl: HTMLElement | null","start":81,"length":6,"target":"htmlEl","line":3,"character":6}],"completions":[],"errors":[{"type":"error","start":201,"length":6,"code":18047,"filename":"index.tsx","id":"err-18047-278-6","text":"'htmlEl' is possibly 'null'.","level":"error","line":7,"character":11,"target":"htmlEl"},{"type":"error","start":369,"length":6,"code":18047,"filename":"index.tsx","id":"err-18047-446-6","text":"'htmlEl' is possibly 'null'.","level":"error","line":17,"character":4,"target":"htmlEl"},{"type":"error","start":415,"length":6,"code":18047,"filename":"index.tsx","id":"err-18047-492-6","text":"'htmlEl' is possibly 'null'.","level":"error","line":20,"character":4,"target":"htmlEl"}],"highlights":[],"hovers":[{"type":"hover","text":"(alias) const onMounted: CreateHook<any>\nimport onMounted","start":34,"length":9,"target":"onMounted","line":1,"character":9},{"type":"hover","text":"(alias) function ref<T>(value: T): [T] extends [Ref] ? IfAny<T, Ref<T>, T> : Ref<UnwrapRef<T>, UnwrapRef<T> | T> (+1 overload)\nimport ref","docs":"Takes an inner value and returns a reactive and mutable ref object, which\nhas a single property `.value` that points to the inner value.","tags":[["param","value - The object to wrap in the ref."],["see","{@link https://vuejs.org/api/reactivity-core.html#ref}"]],"start":45,"length":3,"target":"ref","line":1,"character":20},{"type":"hover","text":"(alias) function triggerRef(ref: Ref): void\nimport triggerRef","docs":"Force trigger effects that depends on a shallow ref. This is typically used\nafter making deep mutations to the inner value of a shallow ref.","tags":[["example","```js\nconst shallow = shallowRef({\n  greet: 'Hello, world'\n})\n\n// Logs \"Hello, world\" once for the first run-through\nwatchEffect(() => {\n  console.log(shallow.value.greet)\n})\n\n// This won't trigger the effect because the ref is shallow\nshallow.value.greet = 'Hello, universe'\n\n// Logs \"Hello, universe\"\ntriggerRef(shallow)\n```"],["param","ref - The ref whose tied effects shall be executed."],["see","{@link https://vuejs.org/api/reactivity-advanced.html#triggerref}"]],"start":50,"length":10,"target":"triggerRef","line":1,"character":25},{"type":"hover","text":"const htmlEl: HTMLElement | null","start":81,"length":6,"target":"htmlEl","line":3,"character":6},{"type":"hover","text":"interface HTMLElement","docs":"Any HTML element. Some elements directly implement this interface, while others implement it via an interface that inherits it.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement)","start":89,"length":11,"target":"HTMLElement","line":3,"character":14},{"type":"hover","text":"var document: Document","docs":"[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/document)","start":110,"length":8,"target":"document","line":3,"character":35},{"type":"hover","text":"(method) ParentNode.querySelector<\"html\">(selectors: \"html\"): HTMLHtmlElement | null (+4 overloads)","docs":"Returns the first element that is a descendant of node that matches selectors.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/querySelector)","start":119,"length":13,"target":"querySelector","line":3,"character":44},{"type":"hover","text":"const darkMode: Ref<{\n    state: boolean;\n}, {\n    state: boolean;\n} | {\n    state: boolean;\n}>","start":148,"length":8,"target":"darkMode","line":5,"character":6},{"type":"hover","text":"(alias) ref<{\n    state: boolean;\n}>(value: {\n    state: boolean;\n}): Ref<{\n    state: boolean;\n}, {\n    state: boolean;\n} | {\n    state: boolean;\n}> (+1 overload)\nimport ref","docs":"Takes an inner value and returns a reactive and mutable ref object, which\nhas a single property `.value` that points to the inner value.","tags":[["param","value - The object to wrap in the ref."],["see","{@link https://vuejs.org/api/reactivity-core.html#ref}"]],"start":159,"length":3,"target":"ref","line":5,"character":17},{"type":"hover","text":"(getter) state: boolean","start":171,"length":5,"target":"state","line":6,"character":6},{"type":"hover","text":"const htmlEl: HTMLElement | null","start":201,"length":6,"target":"htmlEl","line":7,"character":11},{"type":"hover","text":"(property) Element.classList: DOMTokenList","docs":"Allows for manipulation of element's class content attribute as a set of whitespace-separated tokens through a DOMTokenList object.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/classList)","start":208,"length":9,"target":"classList","line":7,"character":18},{"type":"hover","text":"(method) DOMTokenList.contains(token: string): boolean","docs":"Returns true if token is present, and false otherwise.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMTokenList/contains)","start":218,"length":8,"target":"contains","line":7,"character":28},{"type":"hover","text":"(setter) state: boolean","start":247,"length":5,"target":"state","line":10,"character":6},{"type":"hover","text":"(parameter) value: boolean","start":253,"length":5,"target":"value","line":10,"character":12},{"type":"hover","text":"function toggleDarkClass(value: boolean): void","start":275,"length":15,"target":"toggleDarkClass","line":11,"character":4},{"type":"hover","text":"(parameter) value: boolean","start":291,"length":5,"target":"value","line":11,"character":20},{"type":"hover","text":"function toggleDarkClass(value: boolean): void","start":316,"length":15,"target":"toggleDarkClass","line":15,"character":9},{"type":"hover","text":"(parameter) value: boolean","start":332,"length":5,"target":"value","line":15,"character":25},{"type":"hover","text":"(parameter) value: boolean","start":356,"length":5,"target":"value","line":16,"character":6},{"type":"hover","text":"const htmlEl: HTMLElement | null","start":369,"length":6,"target":"htmlEl","line":17,"character":4},{"type":"hover","text":"(property) Element.classList: DOMTokenList","docs":"Allows for manipulation of element's class content attribute as a set of whitespace-separated tokens through a DOMTokenList object.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/classList)","start":376,"length":9,"target":"classList","line":17,"character":11},{"type":"hover","text":"(method) DOMTokenList.add(...tokens: string[]): void","docs":"Adds all arguments passed, except those already present.\n\nThrows a \"SyntaxError\" DOMException if one of the arguments is the empty string.\n\nThrows an \"InvalidCharacterError\" DOMException if one of the arguments contains any ASCII whitespace.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMTokenList/add)","start":386,"length":3,"target":"add","line":17,"character":21},{"type":"hover","text":"const htmlEl: HTMLElement | null","start":415,"length":6,"target":"htmlEl","line":20,"character":4},{"type":"hover","text":"(property) Element.classList: DOMTokenList","docs":"Allows for manipulation of element's class content attribute as a set of whitespace-separated tokens through a DOMTokenList object.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/classList)","start":422,"length":9,"target":"classList","line":20,"character":11},{"type":"hover","text":"(method) DOMTokenList.remove(...tokens: string[]): void","docs":"Removes arguments passed, if they are present.\n\nThrows a \"SyntaxError\" DOMException if one of the arguments is the empty string.\n\nThrows an \"InvalidCharacterError\" DOMException if one of the arguments contains any ASCII whitespace.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMTokenList/remove)","start":432,"length":6,"target":"remove","line":20,"character":21}],"tags":[]}