{"code":"import { createContentLoader } from \"vitepress\";\n\nexport default createContentLoader(\"posts/*.md\", {\n  transform(raw) {\n    return raw.map(({ url, frontmatter }) => ({\n      url,\n      frontmatter,\n    }));\n  },\n});","nodes":[{"type":"hover","text":"(alias) function createContentLoader<T = ContentData[]>(pattern: string | string[], { includeSrc, render, excerpt: renderExcerpt, transform, globOptions }?: ContentOptions<T>): {\n    watch: string | string[];\n    load: () => Promise<T>;\n}\nimport createContentLoader","docs":"Create a loader object that can be directly used as the default export\nof a data loader file.","start":9,"length":19,"target":"createContentLoader","line":0,"character":9},{"type":"hover","text":"(alias) createContentLoader<{\n    url: string;\n    frontmatter: Record<string, any>;\n}[]>(pattern: string | string[], { includeSrc, render, excerpt: renderExcerpt, transform, globOptions }?: ContentOptions<{\n    url: string;\n    frontmatter: Record<string, any>;\n}[]> | undefined): {\n    ...;\n}\nimport createContentLoader","docs":"Create a loader object that can be directly used as the default export\nof a data loader file.","start":65,"length":19,"target":"createContentLoader","line":2,"character":15},{"type":"hover","text":"(property) ContentOptions<{ url: string; frontmatter: Record<string, any>; }[]>.transform?: ((data: ContentData[]) => {\n    url: string;\n    frontmatter: Record<string, any>;\n}[] | Promise<{\n    url: string;\n    frontmatter: Record<string, any>;\n}[]>) | undefined","docs":"Transform the data. Note the data will be inlined as JSON in the client\nbundle if imported from components or markdown files.","start":103,"length":9,"target":"transform","line":3,"character":2},{"type":"hover","text":"(parameter) raw: ContentData[]","start":113,"length":3,"target":"raw","line":3,"character":12},{"type":"hover","text":"(parameter) raw: ContentData[]","start":131,"length":3,"target":"raw","line":4,"character":11},{"type":"hover","text":"(method) Array<ContentData>.map<{\n    url: string;\n    frontmatter: Record<string, any>;\n}>(callbackfn: (value: ContentData, index: number, array: ContentData[]) => {\n    url: string;\n    frontmatter: Record<string, any>;\n}, thisArg?: any): {\n    url: string;\n    frontmatter: Record<string, any>;\n}[]","docs":"Calls a defined callback function on each element of an array, and returns an array that contains the results.","tags":[["param","callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array."],["param","thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value."]],"start":135,"length":3,"target":"map","line":4,"character":15},{"type":"hover","text":"(parameter) url: string","start":142,"length":3,"target":"url","line":4,"character":22},{"type":"hover","text":"(parameter) frontmatter: Record<string, any>","start":147,"length":11,"target":"frontmatter","line":4,"character":27},{"type":"hover","text":"(property) url: string","start":174,"length":3,"target":"url","line":5,"character":6},{"type":"hover","text":"(property) frontmatter: Record<string, any>","start":185,"length":11,"target":"frontmatter","line":6,"character":6}],"meta":{"extension":"ts","compilerOptions":{"strict":true,"module":99,"target":99,"allowJs":true,"skipDefaultLibCheck":true,"skipLibCheck":true,"moduleDetection":3,"baseUrl":"/Users/jayqing/Areas/blog_example/typescript_example_site/","moduleResolution":100},"handbookOptions":{"errors":[],"noErrors":false,"noErrorsCutted":false,"noErrorValidation":false,"noStaticSemanticInfo":false,"showEmit":false,"keepNotations":false},"removals":[],"flagNotations":[],"virtualFiles":[{"offset":0,"filename":"index.ts","filepath":"/Users/jayqing/Areas/blog_example/typescript_example_site/index.ts","content":"import { createContentLoader } from \"vitepress\";\n\nexport default createContentLoader(\"posts/*.md\", {\n  transform(raw) {\n    return raw.map(({ url, frontmatter }) => ({\n      url,\n      frontmatter,\n    }));\n  },\n});","extension":"ts","supportLsp":true}],"positionQueries":[],"positionCompletions":[],"positionHighlights":[]},"queries":[],"completions":[],"errors":[],"highlights":[],"hovers":[{"type":"hover","text":"(alias) function createContentLoader<T = ContentData[]>(pattern: string | string[], { includeSrc, render, excerpt: renderExcerpt, transform, globOptions }?: ContentOptions<T>): {\n    watch: string | string[];\n    load: () => Promise<T>;\n}\nimport createContentLoader","docs":"Create a loader object that can be directly used as the default export\nof a data loader file.","start":9,"length":19,"target":"createContentLoader","line":0,"character":9},{"type":"hover","text":"(alias) createContentLoader<{\n    url: string;\n    frontmatter: Record<string, any>;\n}[]>(pattern: string | string[], { includeSrc, render, excerpt: renderExcerpt, transform, globOptions }?: ContentOptions<{\n    url: string;\n    frontmatter: Record<string, any>;\n}[]> | undefined): {\n    ...;\n}\nimport createContentLoader","docs":"Create a loader object that can be directly used as the default export\nof a data loader file.","start":65,"length":19,"target":"createContentLoader","line":2,"character":15},{"type":"hover","text":"(property) ContentOptions<{ url: string; frontmatter: Record<string, any>; }[]>.transform?: ((data: ContentData[]) => {\n    url: string;\n    frontmatter: Record<string, any>;\n}[] | Promise<{\n    url: string;\n    frontmatter: Record<string, any>;\n}[]>) | undefined","docs":"Transform the data. Note the data will be inlined as JSON in the client\nbundle if imported from components or markdown files.","start":103,"length":9,"target":"transform","line":3,"character":2},{"type":"hover","text":"(parameter) raw: ContentData[]","start":113,"length":3,"target":"raw","line":3,"character":12},{"type":"hover","text":"(parameter) raw: ContentData[]","start":131,"length":3,"target":"raw","line":4,"character":11},{"type":"hover","text":"(method) Array<ContentData>.map<{\n    url: string;\n    frontmatter: Record<string, any>;\n}>(callbackfn: (value: ContentData, index: number, array: ContentData[]) => {\n    url: string;\n    frontmatter: Record<string, any>;\n}, thisArg?: any): {\n    url: string;\n    frontmatter: Record<string, any>;\n}[]","docs":"Calls a defined callback function on each element of an array, and returns an array that contains the results.","tags":[["param","callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array."],["param","thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value."]],"start":135,"length":3,"target":"map","line":4,"character":15},{"type":"hover","text":"(parameter) url: string","start":142,"length":3,"target":"url","line":4,"character":22},{"type":"hover","text":"(parameter) frontmatter: Record<string, any>","start":147,"length":11,"target":"frontmatter","line":4,"character":27},{"type":"hover","text":"(property) url: string","start":174,"length":3,"target":"url","line":5,"character":6},{"type":"hover","text":"(property) frontmatter: Record<string, any>","start":185,"length":11,"target":"frontmatter","line":6,"character":6}],"tags":[]}