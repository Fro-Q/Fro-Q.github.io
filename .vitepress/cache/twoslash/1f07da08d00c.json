{"code":"import { createContentLoader } from 'vitepress'\n\ninterface FormattedDate {\n  raw: Date\n  formattedString: string\n}\n\nexport interface Data {\n  url: string\n  frontmatter: Record<string, any>\n  excerpt?: string\n  created: FormattedDate\n  lastModified: FormattedDate\n  readingTime: number\n  tags: string[]\n  html?: string\n}\n\ndeclare const data: Data[]\nexport { data }\n\nfunction formatDate(raw: string): FormattedDate {\n  const date = new Date(raw)\n  return {\n    raw: date,\n    formattedString: date.toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'numeric',\n      day: 'numeric',\n    }),\n  }\n}\n\nfunction calculateReadingTime(text?: string): number {\n  if (!text) {\n    return 0\n  }\n\n  const WORDS_PER_MINUTE_ZH = 400\n  const WORDS_PER_MINUTE_EN = 225\n  const BLOCKS_PER_MINUTE_CODE = 1\n\n  const content = text\n    .replace(/---[\\s\\S]*?---/, '') // Remove frontmatter\n    .replace(/<[\\s\\S]*?>/g, '') // Remove HTML tags\n\n  const countZh = content.match(/[\\u4E00-\\u9FA5]/g)?.length || 0\n  const countEn = content.match(/[a-z]/gi)?.length || 0\n  const countCodeBlocks = content.match(/```[\\s\\S]*?```/g)?.length || 0\n\n  const minutes = Math.ceil(\n    countZh / WORDS_PER_MINUTE_ZH\n    + countEn / WORDS_PER_MINUTE_EN\n    + countCodeBlocks * BLOCKS_PER_MINUTE_CODE,\n  )\n\n  return minutes\n}\n\nfunction dealTagHierarchy(tag: string): string[] {\n  const tags = new Set<string>()\n  const levels = tag.split('/')\n  levels.forEach((_: string, i: number) => {\n    tags.add(levels.slice(0, i + 1).join('/'))\n  })\n\n  return Array.from(tags)\n}\n\nfunction getTags(html: string | undefined, frontmatter: Record<string, any>): string[] {\n  if (!html) {\n    return []\n  }\n\n  const tags: Set<string> = new Set()\n  const tagReg = /<a href=\"\\/tags\\/[^\"]*\">\\s*<span class=\"tag\">(.*?)<\\/span>\\s*<\\/a>/g\n  let match: RegExpExecArray | null = tagReg.exec(html)\n\n  while (match) {\n    tags.add(match[1])\n    dealTagHierarchy(match[1]).forEach(tag => tags.add(tag))\n    match = tagReg.exec(html)\n  }\n\n  if (frontmatter.tags) {\n    for (const tag of frontmatter.tags) {\n      dealTagHierarchy(tag).forEach(tag => tags.add(tag))\n    }\n  }\n\n  return Array.from(tags)\n}\n\nexport default createContentLoader('posts/**/*.md', {\n  // ...\n  render: true,\n  transform(raw) {\n    return raw.map(({ html, url, frontmatter, excerpt, src }) => ({\n      html,\n      url,\n      frontmatter,\n      excerpt,\n      created: formatDate(frontmatter.created),\n      lastModified: formatDate(frontmatter.last_modified),\n      readingTime: calculateReadingTime(src),\n      tags: getTags(html, frontmatter),\n    }))\n      .sort((a, b) => b.created.raw.getTime() - a.created.raw.getTime())\n  },\n})","nodes":[{"type":"hover","text":"(alias) function createContentLoader<T = ContentData[]>(pattern: string | string[], { includeSrc, render, excerpt: renderExcerpt, transform, globOptions }?: ContentOptions<T>): {\n    watch: string | string[];\n    load: () => Promise<T>;\n}\nimport createContentLoader","docs":"Create a loader object that can be directly used as the default export\nof a data loader file.","start":9,"length":19,"target":"createContentLoader","line":0,"character":9},{"type":"hover","text":"interface FormattedDate","start":59,"length":13,"target":"FormattedDate","line":2,"character":10},{"type":"hover","text":"(property) FormattedDate.raw: Date","start":77,"length":3,"target":"raw","line":3,"character":2},{"type":"hover","text":"interface Date","docs":"Enables basic storage and retrieval of dates and times.","start":82,"length":4,"target":"Date","line":3,"character":7},{"type":"hover","text":"(property) FormattedDate.formattedString: string","start":89,"length":15,"target":"formattedString","line":4,"character":2},{"type":"hover","text":"interface Data","start":133,"length":4,"target":"Data","line":7,"character":17},{"type":"hover","text":"(property) Data.url: string","start":142,"length":3,"target":"url","line":8,"character":2},{"type":"hover","text":"(property) Data.frontmatter: Record<string, any>","start":156,"length":11,"target":"frontmatter","line":9,"character":2},{"type":"hover","text":"type Record<K extends keyof any, T> = { [P in K]: T; }","docs":"Construct a type with a set of properties K of type T","start":169,"length":6,"target":"Record","line":9,"character":15},{"type":"hover","text":"(property) Data.excerpt?: string | undefined","start":191,"length":7,"target":"excerpt","line":10,"character":2},{"type":"hover","text":"(property) Data.created: FormattedDate","start":210,"length":7,"target":"created","line":11,"character":2},{"type":"hover","text":"interface FormattedDate","start":219,"length":13,"target":"FormattedDate","line":11,"character":11},{"type":"hover","text":"(property) Data.lastModified: FormattedDate","start":235,"length":12,"target":"lastModified","line":12,"character":2},{"type":"hover","text":"interface FormattedDate","start":249,"length":13,"target":"FormattedDate","line":12,"character":16},{"type":"hover","text":"(property) Data.readingTime: number","start":265,"length":11,"target":"readingTime","line":13,"character":2},{"type":"hover","text":"(property) Data.tags: string[]","start":287,"length":4,"target":"tags","line":14,"character":2},{"type":"hover","text":"(property) Data.html?: string | undefined","start":304,"length":4,"target":"html","line":15,"character":2},{"type":"hover","text":"const data: Data[]","start":335,"length":4,"target":"data","line":18,"character":14},{"type":"hover","text":"interface Data","start":341,"length":4,"target":"Data","line":18,"character":20},{"type":"hover","text":"(alias) const data: Data[]\nexport data","start":357,"length":4,"target":"data","line":19,"character":9},{"type":"hover","text":"function formatDate(raw: string): FormattedDate","start":374,"length":10,"target":"formatDate","line":21,"character":9},{"type":"hover","text":"(parameter) raw: string","start":385,"length":3,"target":"raw","line":21,"character":20},{"type":"hover","text":"interface FormattedDate","start":399,"length":13,"target":"FormattedDate","line":21,"character":34},{"type":"hover","text":"const date: Date","start":423,"length":4,"target":"date","line":22,"character":8},{"type":"hover","text":"var Date: DateConstructor\nnew (value: number | string | Date) => Date (+4 overloads)","start":434,"length":4,"target":"Date","line":22,"character":19},{"type":"hover","text":"(parameter) raw: string","start":439,"length":3,"target":"raw","line":22,"character":24},{"type":"hover","text":"(property) FormattedDate.raw: Date","start":459,"length":3,"target":"raw","line":24,"character":4},{"type":"hover","text":"const date: Date","start":464,"length":4,"target":"date","line":24,"character":9},{"type":"hover","text":"(property) FormattedDate.formattedString: string","start":474,"length":15,"target":"formattedString","line":25,"character":4},{"type":"hover","text":"const date: Date","start":491,"length":4,"target":"date","line":25,"character":21},{"type":"hover","text":"(method) Date.toLocaleDateString(locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string (+2 overloads)","docs":"Converts a date to a string by using the current or specified locale.","tags":[["param","locales A locale string, array of locale strings, Intl.Locale object, or array of Intl.Locale objects that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used."],["param","options An object that contains one or more properties that specify comparison options."]],"start":496,"length":18,"target":"toLocaleDateString","line":25,"character":26},{"type":"hover","text":"(property) Intl.DateTimeFormatOptions.year?: \"numeric\" | \"2-digit\" | undefined","start":532,"length":4,"target":"year","line":26,"character":6},{"type":"hover","text":"(property) Intl.DateTimeFormatOptions.month?: \"numeric\" | \"2-digit\" | \"long\" | \"short\" | \"narrow\" | undefined","start":555,"length":5,"target":"month","line":27,"character":6},{"type":"hover","text":"(property) Intl.DateTimeFormatOptions.day?: \"numeric\" | \"2-digit\" | undefined","start":579,"length":3,"target":"day","line":28,"character":6},{"type":"hover","text":"function calculateReadingTime(text?: string): number","start":619,"length":20,"target":"calculateReadingTime","line":33,"character":9},{"type":"hover","text":"(parameter) text: string | undefined","start":640,"length":4,"target":"text","line":33,"character":30},{"type":"hover","text":"(parameter) text: string | undefined","start":672,"length":4,"target":"text","line":34,"character":7},{"type":"hover","text":"const WORDS_PER_MINUTE_ZH: 400","start":706,"length":19,"target":"WORDS_PER_MINUTE_ZH","line":38,"character":8},{"type":"hover","text":"const WORDS_PER_MINUTE_EN: 225","start":740,"length":19,"target":"WORDS_PER_MINUTE_EN","line":39,"character":8},{"type":"hover","text":"const BLOCKS_PER_MINUTE_CODE: 1","start":774,"length":22,"target":"BLOCKS_PER_MINUTE_CODE","line":40,"character":8},{"type":"hover","text":"const content: string","start":810,"length":7,"target":"content","line":42,"character":8},{"type":"hover","text":"(parameter) text: string","start":820,"length":4,"target":"text","line":42,"character":18},{"type":"hover","text":"(method) String.replace(searchValue: {\n    [Symbol.replace](string: string, replaceValue: string): string;\n}, replaceValue: string): string (+3 overloads)","docs":"Passes a string and \n{@linkcode \nreplaceValue\n}\n to the `[Symbol.replace]` method on \n{@linkcode \nsearchValue\n}\n. This method is expected to implement its own replacement algorithm.","tags":[["param","searchValue An object that supports searching for and replacing matches within a string."],["param","replaceValue The replacement text."]],"start":830,"length":7,"target":"replace","line":43,"character":5},{"type":"hover","text":"(method) String.replace(searchValue: {\n    [Symbol.replace](string: string, replaceValue: string): string;\n}, replaceValue: string): string (+3 overloads)","docs":"Passes a string and \n{@linkcode \nreplaceValue\n}\n to the `[Symbol.replace]` method on \n{@linkcode \nsearchValue\n}\n. This method is expected to implement its own replacement algorithm.","tags":[["param","searchValue An object that supports searching for and replacing matches within a string."],["param","replaceValue The replacement text."]],"start":887,"length":7,"target":"replace","line":44,"character":5},{"type":"hover","text":"const countZh: number","start":943,"length":7,"target":"countZh","line":46,"character":8},{"type":"hover","text":"const content: string","start":953,"length":7,"target":"content","line":46,"character":18},{"type":"hover","text":"(method) String.match(matcher: {\n    [Symbol.match](string: string): RegExpMatchArray | null;\n}): RegExpMatchArray | null (+1 overload)","docs":"Matches a string or an object that supports being matched against, and returns an array\ncontaining the results of that search, or null if no matches are found.","tags":[["param","matcher An object that supports being matched against."]],"start":961,"length":5,"target":"match","line":46,"character":26},{"type":"hover","text":"(property) Array<string>.length: number | undefined","docs":"Gets or sets the length of the array. This is a number one higher than the highest index in the array.","start":988,"length":6,"target":"length","line":46,"character":53},{"type":"hover","text":"const countEn: number","start":1008,"length":7,"target":"countEn","line":47,"character":8},{"type":"hover","text":"const content: string","start":1018,"length":7,"target":"content","line":47,"character":18},{"type":"hover","text":"(method) String.match(matcher: {\n    [Symbol.match](string: string): RegExpMatchArray | null;\n}): RegExpMatchArray | null (+1 overload)","docs":"Matches a string or an object that supports being matched against, and returns an array\ncontaining the results of that search, or null if no matches are found.","tags":[["param","matcher An object that supports being matched against."]],"start":1026,"length":5,"target":"match","line":47,"character":26},{"type":"hover","text":"(property) Array<string>.length: number | undefined","docs":"Gets or sets the length of the array. This is a number one higher than the highest index in the array.","start":1044,"length":6,"target":"length","line":47,"character":44},{"type":"hover","text":"const countCodeBlocks: number","start":1064,"length":15,"target":"countCodeBlocks","line":48,"character":8},{"type":"hover","text":"const content: string","start":1082,"length":7,"target":"content","line":48,"character":26},{"type":"hover","text":"(method) String.match(matcher: {\n    [Symbol.match](string: string): RegExpMatchArray | null;\n}): RegExpMatchArray | null (+1 overload)","docs":"Matches a string or an object that supports being matched against, and returns an array\ncontaining the results of that search, or null if no matches are found.","tags":[["param","matcher An object that supports being matched against."]],"start":1090,"length":5,"target":"match","line":48,"character":34},{"type":"hover","text":"(property) Array<string>.length: number | undefined","docs":"Gets or sets the length of the array. This is a number one higher than the highest index in the array.","start":1116,"length":6,"target":"length","line":48,"character":60},{"type":"hover","text":"const minutes: number","start":1137,"length":7,"target":"minutes","line":50,"character":8},{"type":"hover","text":"var Math: Math","docs":"An intrinsic object that provides basic mathematics functionality and constants.","start":1147,"length":4,"target":"Math","line":50,"character":18},{"type":"hover","text":"(method) Math.ceil(x: number): number","docs":"Returns the smallest integer greater than or equal to its numeric argument.","tags":[["param","x A numeric expression."]],"start":1152,"length":4,"target":"ceil","line":50,"character":23},{"type":"hover","text":"const countZh: number","start":1162,"length":7,"target":"countZh","line":51,"character":4},{"type":"hover","text":"const WORDS_PER_MINUTE_ZH: 400","start":1172,"length":19,"target":"WORDS_PER_MINUTE_ZH","line":51,"character":14},{"type":"hover","text":"const countEn: number","start":1198,"length":7,"target":"countEn","line":52,"character":6},{"type":"hover","text":"const WORDS_PER_MINUTE_EN: 225","start":1208,"length":19,"target":"WORDS_PER_MINUTE_EN","line":52,"character":16},{"type":"hover","text":"const countCodeBlocks: number","start":1234,"length":15,"target":"countCodeBlocks","line":53,"character":6},{"type":"hover","text":"const BLOCKS_PER_MINUTE_CODE: 1","start":1252,"length":22,"target":"BLOCKS_PER_MINUTE_CODE","line":53,"character":24},{"type":"hover","text":"const minutes: number","start":1290,"length":7,"target":"minutes","line":56,"character":9},{"type":"hover","text":"function dealTagHierarchy(tag: string): string[]","start":1310,"length":16,"target":"dealTagHierarchy","line":59,"character":9},{"type":"hover","text":"(parameter) tag: string","start":1327,"length":3,"target":"tag","line":59,"character":26},{"type":"hover","text":"const tags: Set<string>","start":1360,"length":4,"target":"tags","line":60,"character":8},{"type":"hover","text":"var Set: SetConstructor\nnew <string>(iterable?: Iterable<string> | null | undefined) => Set<string> (+1 overload)","start":1371,"length":3,"target":"Set","line":60,"character":19},{"type":"hover","text":"const levels: string[]","start":1393,"length":6,"target":"levels","line":61,"character":8},{"type":"hover","text":"(parameter) tag: string","start":1402,"length":3,"target":"tag","line":61,"character":17},{"type":"hover","text":"(method) String.split(separator: string | RegExp, limit?: number): string[] (+1 overload)","docs":"Split a string into substrings using the specified separator and return them as an array.","tags":[["param","separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned."],["param","limit A value used to limit the number of elements returned in the array."]],"start":1406,"length":5,"target":"split","line":61,"character":21},{"type":"hover","text":"const levels: string[]","start":1419,"length":6,"target":"levels","line":62,"character":2},{"type":"hover","text":"(method) Array<string>.forEach(callbackfn: (value: string, index: number, array: string[]) => void, thisArg?: any): void","docs":"Performs the specified action for each element in an array.","tags":[["param","callbackfn A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array."],["param","thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value."]],"start":1426,"length":7,"target":"forEach","line":62,"character":9},{"type":"hover","text":"(parameter) _: string","start":1435,"length":1,"target":"_","line":62,"character":18},{"type":"hover","text":"(parameter) i: number","start":1446,"length":1,"target":"i","line":62,"character":29},{"type":"hover","text":"const tags: Set<string>","start":1466,"length":4,"target":"tags","line":63,"character":4},{"type":"hover","text":"(method) Set<string>.add(value: string): Set<string>","docs":"Appends a new element with a specified value to the end of the Set.","start":1471,"length":3,"target":"add","line":63,"character":9},{"type":"hover","text":"const levels: string[]","start":1475,"length":6,"target":"levels","line":63,"character":13},{"type":"hover","text":"(method) Array<string>.slice(start?: number, end?: number): string[]","docs":"Returns a copy of a section of an array.\nFor both start and end, a negative index can be used to indicate an offset from the end of the array.\nFor example, -2 refers to the second to last element of the array.","tags":[["param","start The beginning index of the specified portion of the array.\nIf start is undefined, then the slice begins at index 0."],["param","end The end index of the specified portion of the array. This is exclusive of the element at the index 'end'.\nIf end is undefined, then the slice extends to the end of the array."]],"start":1482,"length":5,"target":"slice","line":63,"character":20},{"type":"hover","text":"(parameter) i: number","start":1491,"length":1,"target":"i","line":63,"character":29},{"type":"hover","text":"(method) Array<string>.join(separator?: string): string","docs":"Adds all the elements of an array into a string, separated by the specified separator string.","tags":[["param","separator A string used to separate one element of the array from the next in the resulting string. If omitted, the array elements are separated with a comma."]],"start":1498,"length":4,"target":"join","line":63,"character":36},{"type":"hover","text":"var Array: ArrayConstructor","start":1524,"length":5,"target":"Array","line":66,"character":9},{"type":"hover","text":"(method) ArrayConstructor.from<string>(iterable: Iterable<string> | ArrayLike<string>): string[] (+3 overloads)","docs":"Creates an array from an iterable object.","tags":[["param","iterable An iterable object to convert to an array."]],"start":1530,"length":4,"target":"from","line":66,"character":15},{"type":"hover","text":"const tags: Set<string>","start":1535,"length":4,"target":"tags","line":66,"character":20},{"type":"hover","text":"function getTags(html: string | undefined, frontmatter: Record<string, any>): string[]","start":1553,"length":7,"target":"getTags","line":69,"character":9},{"type":"hover","text":"(parameter) html: string | undefined","start":1561,"length":4,"target":"html","line":69,"character":17},{"type":"hover","text":"(parameter) frontmatter: Record<string, any>","start":1587,"length":11,"target":"frontmatter","line":69,"character":43},{"type":"hover","text":"type Record<K extends keyof any, T> = { [P in K]: T; }","docs":"Construct a type with a set of properties K of type T","start":1600,"length":6,"target":"Record","line":69,"character":56},{"type":"hover","text":"(parameter) html: string | undefined","start":1640,"length":4,"target":"html","line":70,"character":7},{"type":"hover","text":"const tags: Set<string>","start":1675,"length":4,"target":"tags","line":74,"character":8},{"type":"hover","text":"interface Set<T>","start":1681,"length":3,"target":"Set","line":74,"character":14},{"type":"hover","text":"var Set: SetConstructor\nnew <string>(iterable?: Iterable<string> | null | undefined) => Set<string> (+1 overload)","start":1699,"length":3,"target":"Set","line":74,"character":32},{"type":"hover","text":"const tagReg: RegExp","start":1713,"length":6,"target":"tagReg","line":75,"character":8},{"type":"hover","text":"let match: RegExpExecArray | null","start":1798,"length":5,"target":"match","line":76,"character":6},{"type":"hover","text":"interface RegExpExecArray","start":1805,"length":15,"target":"RegExpExecArray","line":76,"character":13},{"type":"hover","text":"const tagReg: RegExp","start":1830,"length":6,"target":"tagReg","line":76,"character":38},{"type":"hover","text":"(method) RegExp.exec(string: string): RegExpExecArray | null","docs":"Executes a search on a string using a regular expression pattern, and returns an array containing the results of that search.","tags":[["param","string The String object or string literal on which to perform the search."]],"start":1837,"length":4,"target":"exec","line":76,"character":45},{"type":"hover","text":"(parameter) html: string","start":1842,"length":4,"target":"html","line":76,"character":50},{"type":"hover","text":"let match: RegExpExecArray | null","start":1858,"length":5,"target":"match","line":78,"character":9},{"type":"hover","text":"const tags: Set<string>","start":1871,"length":4,"target":"tags","line":79,"character":4},{"type":"hover","text":"(method) Set<string>.add(value: string): Set<string>","docs":"Appends a new element with a specified value to the end of the Set.","start":1876,"length":3,"target":"add","line":79,"character":9},{"type":"hover","text":"let match: RegExpExecArray","start":1880,"length":5,"target":"match","line":79,"character":13},{"type":"hover","text":"function dealTagHierarchy(tag: string): string[]","start":1894,"length":16,"target":"dealTagHierarchy","line":80,"character":4},{"type":"hover","text":"let match: RegExpExecArray","start":1911,"length":5,"target":"match","line":80,"character":21},{"type":"hover","text":"(method) Array<string>.forEach(callbackfn: (value: string, index: number, array: string[]) => void, thisArg?: any): void","docs":"Performs the specified action for each element in an array.","tags":[["param","callbackfn A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array."],["param","thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value."]],"start":1921,"length":7,"target":"forEach","line":80,"character":31},{"type":"hover","text":"(parameter) tag: string","start":1929,"length":3,"target":"tag","line":80,"character":39},{"type":"hover","text":"const tags: Set<string>","start":1936,"length":4,"target":"tags","line":80,"character":46},{"type":"hover","text":"(method) Set<string>.add(value: string): Set<string>","docs":"Appends a new element with a specified value to the end of the Set.","start":1941,"length":3,"target":"add","line":80,"character":51},{"type":"hover","text":"(parameter) tag: string","start":1945,"length":3,"target":"tag","line":80,"character":55},{"type":"hover","text":"let match: RegExpExecArray | null","start":1955,"length":5,"target":"match","line":81,"character":4},{"type":"hover","text":"const tagReg: RegExp","start":1963,"length":6,"target":"tagReg","line":81,"character":12},{"type":"hover","text":"(method) RegExp.exec(string: string): RegExpExecArray | null","docs":"Executes a search on a string using a regular expression pattern, and returns an array containing the results of that search.","tags":[["param","string The String object or string literal on which to perform the search."]],"start":1970,"length":4,"target":"exec","line":81,"character":19},{"type":"hover","text":"(parameter) html: string","start":1975,"length":4,"target":"html","line":81,"character":24},{"type":"hover","text":"(parameter) frontmatter: Record<string, any>","start":1992,"length":11,"target":"frontmatter","line":84,"character":6},{"type":"hover","text":"any","start":2004,"length":4,"target":"tags","line":84,"character":18},{"type":"hover","text":"const tag: any","start":2027,"length":3,"target":"tag","line":85,"character":15},{"type":"hover","text":"(parameter) frontmatter: Record<string, any>","start":2034,"length":11,"target":"frontmatter","line":85,"character":22},{"type":"hover","text":"any","start":2046,"length":4,"target":"tags","line":85,"character":34},{"type":"hover","text":"function dealTagHierarchy(tag: string): string[]","start":2060,"length":16,"target":"dealTagHierarchy","line":86,"character":6},{"type":"hover","text":"const tag: any","start":2077,"length":3,"target":"tag","line":86,"character":23},{"type":"hover","text":"(method) Array<string>.forEach(callbackfn: (value: string, index: number, array: string[]) => void, thisArg?: any): void","docs":"Performs the specified action for each element in an array.","tags":[["param","callbackfn A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array."],["param","thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value."]],"start":2082,"length":7,"target":"forEach","line":86,"character":28},{"type":"hover","text":"(parameter) tag: string","start":2090,"length":3,"target":"tag","line":86,"character":36},{"type":"hover","text":"const tags: Set<string>","start":2097,"length":4,"target":"tags","line":86,"character":43},{"type":"hover","text":"(method) Set<string>.add(value: string): Set<string>","docs":"Appends a new element with a specified value to the end of the Set.","start":2102,"length":3,"target":"add","line":86,"character":48},{"type":"hover","text":"(parameter) tag: string","start":2106,"length":3,"target":"tag","line":86,"character":52},{"type":"hover","text":"var Array: ArrayConstructor","start":2132,"length":5,"target":"Array","line":90,"character":9},{"type":"hover","text":"(method) ArrayConstructor.from<string>(iterable: Iterable<string> | ArrayLike<string>): string[] (+3 overloads)","docs":"Creates an array from an iterable object.","tags":[["param","iterable An iterable object to convert to an array."]],"start":2138,"length":4,"target":"from","line":90,"character":15},{"type":"hover","text":"const tags: Set<string>","start":2143,"length":4,"target":"tags","line":90,"character":20},{"type":"hover","text":"(alias) createContentLoader<{\n    html: string | undefined;\n    url: string;\n    frontmatter: Record<string, any>;\n    excerpt: string | undefined;\n    created: FormattedDate;\n    lastModified: FormattedDate;\n    readingTime: number;\n    tags: string[];\n}[]>(pattern: string | string[], { includeSrc, render, excerpt: renderExcerpt, transform, globOptions }?: ContentOptions<...> | undefined): {\n    ...;\n}\nimport createContentLoader","docs":"Create a loader object that can be directly used as the default export\nof a data loader file.","start":2167,"length":19,"target":"createContentLoader","line":93,"character":15},{"type":"hover","text":"(property) ContentOptions<T = ContentData[]>.render?: boolean | undefined","docs":"Render src to HTML and include in data?","tags":[["default","false"]],"start":2217,"length":6,"target":"render","line":95,"character":2},{"type":"hover","text":"(property) ContentOptions<{ html: string | undefined; url: string; frontmatter: Record<string, any>; excerpt: string | undefined; created: FormattedDate; lastModified: FormattedDate; readingTime: number; tags: string[]; }[]>.transform?: ((data: ContentData[]) => {\n    html: string | undefined;\n    url: string;\n    frontmatter: Record<string, any>;\n    excerpt: string | undefined;\n    created: FormattedDate;\n    lastModified: FormattedDate;\n    readingTime: number;\n    tags: string[];\n}[] | Promise<...>) | undefined","docs":"Transform the data. Note the data will be inlined as JSON in the client\nbundle if imported from components or markdown files.","start":2233,"length":9,"target":"transform","line":96,"character":2},{"type":"hover","text":"(parameter) raw: ContentData[]","start":2243,"length":3,"target":"raw","line":96,"character":12},{"type":"hover","text":"(parameter) raw: ContentData[]","start":2261,"length":3,"target":"raw","line":97,"character":11},{"type":"hover","text":"(method) Array<ContentData>.map<{\n    html: string | undefined;\n    url: string;\n    frontmatter: Record<string, any>;\n    excerpt: string | undefined;\n    created: FormattedDate;\n    lastModified: FormattedDate;\n    readingTime: number;\n    tags: string[];\n}>(callbackfn: (value: ContentData, index: number, array: ContentData[]) => {\n    html: string | undefined;\n    url: string;\n    frontmatter: Record<string, any>;\n    excerpt: string | undefined;\n    created: FormattedDate;\n    lastModified: FormattedDate;\n    readingTime: number;\n    tags: string[];\n}, thisArg?: any): {\n    html: string | undefined;\n    url: string;\n    frontmatter: Record<string, any>;\n    excerpt: string | undefined;\n    created: FormattedDate;\n    lastModified: FormattedDate;\n    readingTime: number;\n    tags: string[];\n}[]","docs":"Calls a defined callback function on each element of an array, and returns an array that contains the results.","tags":[["param","callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array."],["param","thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value."]],"start":2265,"length":3,"target":"map","line":97,"character":15},{"type":"hover","text":"(parameter) html: string | undefined","start":2272,"length":4,"target":"html","line":97,"character":22},{"type":"hover","text":"(parameter) url: string","start":2278,"length":3,"target":"url","line":97,"character":28},{"type":"hover","text":"(parameter) frontmatter: Record<string, any>","start":2283,"length":11,"target":"frontmatter","line":97,"character":33},{"type":"hover","text":"(parameter) excerpt: string | undefined","start":2296,"length":7,"target":"excerpt","line":97,"character":46},{"type":"hover","text":"(parameter) src: string | undefined","start":2305,"length":3,"target":"src","line":97,"character":55},{"type":"hover","text":"(property) html: string | undefined","start":2324,"length":4,"target":"html","line":98,"character":6},{"type":"hover","text":"(property) url: string","start":2336,"length":3,"target":"url","line":99,"character":6},{"type":"hover","text":"(property) frontmatter: Record<string, any>","start":2347,"length":11,"target":"frontmatter","line":100,"character":6},{"type":"hover","text":"(property) excerpt: string | undefined","start":2366,"length":7,"target":"excerpt","line":101,"character":6},{"type":"hover","text":"(property) created: FormattedDate","start":2381,"length":7,"target":"created","line":102,"character":6},{"type":"hover","text":"function formatDate(raw: string): FormattedDate","start":2390,"length":10,"target":"formatDate","line":102,"character":15},{"type":"hover","text":"(parameter) frontmatter: Record<string, any>","start":2401,"length":11,"target":"frontmatter","line":102,"character":26},{"type":"hover","text":"any","start":2413,"length":7,"target":"created","line":102,"character":38},{"type":"hover","text":"(property) lastModified: FormattedDate","start":2429,"length":12,"target":"lastModified","line":103,"character":6},{"type":"hover","text":"function formatDate(raw: string): FormattedDate","start":2443,"length":10,"target":"formatDate","line":103,"character":20},{"type":"hover","text":"(parameter) frontmatter: Record<string, any>","start":2454,"length":11,"target":"frontmatter","line":103,"character":31},{"type":"hover","text":"any","start":2466,"length":13,"target":"last_modified","line":103,"character":43},{"type":"hover","text":"(property) readingTime: number","start":2488,"length":11,"target":"readingTime","line":104,"character":6},{"type":"hover","text":"function calculateReadingTime(text?: string): number","start":2501,"length":20,"target":"calculateReadingTime","line":104,"character":19},{"type":"hover","text":"(parameter) src: string | undefined","start":2522,"length":3,"target":"src","line":104,"character":40},{"type":"hover","text":"(property) tags: string[]","start":2534,"length":4,"target":"tags","line":105,"character":6},{"type":"hover","text":"function getTags(html: string | undefined, frontmatter: Record<string, any>): string[]","start":2540,"length":7,"target":"getTags","line":105,"character":12},{"type":"hover","text":"(parameter) html: string | undefined","start":2548,"length":4,"target":"html","line":105,"character":20},{"type":"hover","text":"(parameter) frontmatter: Record<string, any>","start":2554,"length":11,"target":"frontmatter","line":105,"character":26},{"type":"hover","text":"(method) Array<{ html: string | undefined; url: string; frontmatter: Record<string, any>; excerpt: string | undefined; created: FormattedDate; lastModified: FormattedDate; readingTime: number; tags: string[]; }>.sort(compareFn?: ((a: {\n    html: string | undefined;\n    url: string;\n    frontmatter: Record<string, any>;\n    excerpt: string | undefined;\n    created: FormattedDate;\n    lastModified: FormattedDate;\n    readingTime: number;\n    tags: string[];\n}, b: {\n    html: string | undefined;\n    url: string;\n    frontmatter: Record<string, any>;\n    excerpt: string | undefined;\n    created: FormattedDate;\n    lastModified: FormattedDate;\n    readingTime: number;\n    tags: string[];\n}) => number) | undefined): {\n    html: string | undefined;\n    url: string;\n    frontmatter: Record<string, any>;\n    excerpt: string | undefined;\n    created: FormattedDate;\n    lastModified: FormattedDate;\n    readingTime: number;\n    tags: string[];\n}[]","docs":"Sorts an array in place.\nThis method mutates the array and returns a reference to the same array.","tags":[["param","compareFn Function used to determine the order of the elements. It is expected to return\na negative value if the first argument is less than the second argument, zero if they're equal, and a positive\nvalue otherwise. If omitted, the elements are sorted in ascending, UTF-16 code unit order.\n```ts\n[11,2,22,1].sort((a, b) => a - b)\n```"]],"start":2583,"length":4,"target":"sort","line":107,"character":7},{"type":"hover","text":"(parameter) a: {\n    html: string | undefined;\n    url: string;\n    frontmatter: Record<string, any>;\n    excerpt: string | undefined;\n    created: FormattedDate;\n    lastModified: FormattedDate;\n    readingTime: number;\n    tags: string[];\n}","start":2589,"length":1,"target":"a","line":107,"character":13},{"type":"hover","text":"(parameter) b: {\n    html: string | undefined;\n    url: string;\n    frontmatter: Record<string, any>;\n    excerpt: string | undefined;\n    created: FormattedDate;\n    lastModified: FormattedDate;\n    readingTime: number;\n    tags: string[];\n}","start":2592,"length":1,"target":"b","line":107,"character":16},{"type":"hover","text":"(parameter) b: {\n    html: string | undefined;\n    url: string;\n    frontmatter: Record<string, any>;\n    excerpt: string | undefined;\n    created: FormattedDate;\n    lastModified: FormattedDate;\n    readingTime: number;\n    tags: string[];\n}","start":2598,"length":1,"target":"b","line":107,"character":22},{"type":"hover","text":"(property) created: FormattedDate","start":2600,"length":7,"target":"created","line":107,"character":24},{"type":"hover","text":"(property) FormattedDate.raw: Date","start":2608,"length":3,"target":"raw","line":107,"character":32},{"type":"hover","text":"(method) Date.getTime(): number","docs":"Returns the stored time value in milliseconds since midnight, January 1, 1970 UTC.","start":2612,"length":7,"target":"getTime","line":107,"character":36},{"type":"hover","text":"(parameter) a: {\n    html: string | undefined;\n    url: string;\n    frontmatter: Record<string, any>;\n    excerpt: string | undefined;\n    created: FormattedDate;\n    lastModified: FormattedDate;\n    readingTime: number;\n    tags: string[];\n}","start":2624,"length":1,"target":"a","line":107,"character":48},{"type":"hover","text":"(property) created: FormattedDate","start":2626,"length":7,"target":"created","line":107,"character":50},{"type":"hover","text":"(property) FormattedDate.raw: Date","start":2634,"length":3,"target":"raw","line":107,"character":58},{"type":"hover","text":"(method) Date.getTime(): number","docs":"Returns the stored time value in milliseconds since midnight, January 1, 1970 UTC.","start":2638,"length":7,"target":"getTime","line":107,"character":62}],"meta":{"extension":"ts","compilerOptions":{"strict":true,"module":99,"target":99,"allowJs":true,"skipDefaultLibCheck":true,"skipLibCheck":true,"moduleDetection":3,"baseUrl":"/Users/jayqing/Areas/blog_example/typescript_example_site/","moduleResolution":100},"handbookOptions":{"errors":[],"noErrors":false,"noErrorsCutted":false,"noErrorValidation":false,"noStaticSemanticInfo":false,"showEmit":false,"keepNotations":false},"removals":[],"flagNotations":[],"virtualFiles":[{"offset":0,"filename":"index.ts","filepath":"/Users/jayqing/Areas/blog_example/typescript_example_site/index.ts","content":"import { createContentLoader } from 'vitepress'\n\ninterface FormattedDate {\n  raw: Date\n  formattedString: string\n}\n\nexport interface Data {\n  url: string\n  frontmatter: Record<string, any>\n  excerpt?: string\n  created: FormattedDate\n  lastModified: FormattedDate\n  readingTime: number\n  tags: string[]\n  html?: string\n}\n\ndeclare const data: Data[]\nexport { data }\n\nfunction formatDate(raw: string): FormattedDate {\n  const date = new Date(raw)\n  return {\n    raw: date,\n    formattedString: date.toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'numeric',\n      day: 'numeric',\n    }),\n  }\n}\n\nfunction calculateReadingTime(text?: string): number {\n  if (!text) {\n    return 0\n  }\n\n  const WORDS_PER_MINUTE_ZH = 400\n  const WORDS_PER_MINUTE_EN = 225\n  const BLOCKS_PER_MINUTE_CODE = 1\n\n  const content = text\n    .replace(/---[\\s\\S]*?---/, '') // Remove frontmatter\n    .replace(/<[\\s\\S]*?>/g, '') // Remove HTML tags\n\n  const countZh = content.match(/[\\u4E00-\\u9FA5]/g)?.length || 0\n  const countEn = content.match(/[a-z]/gi)?.length || 0\n  const countCodeBlocks = content.match(/```[\\s\\S]*?```/g)?.length || 0\n\n  const minutes = Math.ceil(\n    countZh / WORDS_PER_MINUTE_ZH\n    + countEn / WORDS_PER_MINUTE_EN\n    + countCodeBlocks * BLOCKS_PER_MINUTE_CODE,\n  )\n\n  return minutes\n}\n\nfunction dealTagHierarchy(tag: string): string[] {\n  const tags = new Set<string>()\n  const levels = tag.split('/')\n  levels.forEach((_: string, i: number) => {\n    tags.add(levels.slice(0, i + 1).join('/'))\n  })\n\n  return Array.from(tags)\n}\n\nfunction getTags(html: string | undefined, frontmatter: Record<string, any>): string[] {\n  if (!html) {\n    return []\n  }\n\n  const tags: Set<string> = new Set()\n  const tagReg = /<a href=\"\\/tags\\/[^\"]*\">\\s*<span class=\"tag\">(.*?)<\\/span>\\s*<\\/a>/g\n  let match: RegExpExecArray | null = tagReg.exec(html)\n\n  while (match) {\n    tags.add(match[1])\n    dealTagHierarchy(match[1]).forEach(tag => tags.add(tag))\n    match = tagReg.exec(html)\n  }\n\n  if (frontmatter.tags) {\n    for (const tag of frontmatter.tags) {\n      dealTagHierarchy(tag).forEach(tag => tags.add(tag))\n    }\n  }\n\n  return Array.from(tags)\n}\n\nexport default createContentLoader('posts/**/*.md', {\n  // ...\n  render: true,\n  transform(raw) {\n    return raw.map(({ html, url, frontmatter, excerpt, src }) => ({\n      html,\n      url,\n      frontmatter,\n      excerpt,\n      created: formatDate(frontmatter.created),\n      lastModified: formatDate(frontmatter.last_modified),\n      readingTime: calculateReadingTime(src),\n      tags: getTags(html, frontmatter),\n    }))\n      .sort((a, b) => b.created.raw.getTime() - a.created.raw.getTime())\n  },\n})","extension":"ts","supportLsp":true}],"positionQueries":[],"positionCompletions":[],"positionHighlights":[]},"queries":[],"completions":[],"errors":[],"highlights":[],"hovers":[{"type":"hover","text":"(alias) function createContentLoader<T = ContentData[]>(pattern: string | string[], { includeSrc, render, excerpt: renderExcerpt, transform, globOptions }?: ContentOptions<T>): {\n    watch: string | string[];\n    load: () => Promise<T>;\n}\nimport createContentLoader","docs":"Create a loader object that can be directly used as the default export\nof a data loader file.","start":9,"length":19,"target":"createContentLoader","line":0,"character":9},{"type":"hover","text":"interface FormattedDate","start":59,"length":13,"target":"FormattedDate","line":2,"character":10},{"type":"hover","text":"(property) FormattedDate.raw: Date","start":77,"length":3,"target":"raw","line":3,"character":2},{"type":"hover","text":"interface Date","docs":"Enables basic storage and retrieval of dates and times.","start":82,"length":4,"target":"Date","line":3,"character":7},{"type":"hover","text":"(property) FormattedDate.formattedString: string","start":89,"length":15,"target":"formattedString","line":4,"character":2},{"type":"hover","text":"interface Data","start":133,"length":4,"target":"Data","line":7,"character":17},{"type":"hover","text":"(property) Data.url: string","start":142,"length":3,"target":"url","line":8,"character":2},{"type":"hover","text":"(property) Data.frontmatter: Record<string, any>","start":156,"length":11,"target":"frontmatter","line":9,"character":2},{"type":"hover","text":"type Record<K extends keyof any, T> = { [P in K]: T; }","docs":"Construct a type with a set of properties K of type T","start":169,"length":6,"target":"Record","line":9,"character":15},{"type":"hover","text":"(property) Data.excerpt?: string | undefined","start":191,"length":7,"target":"excerpt","line":10,"character":2},{"type":"hover","text":"(property) Data.created: FormattedDate","start":210,"length":7,"target":"created","line":11,"character":2},{"type":"hover","text":"interface FormattedDate","start":219,"length":13,"target":"FormattedDate","line":11,"character":11},{"type":"hover","text":"(property) Data.lastModified: FormattedDate","start":235,"length":12,"target":"lastModified","line":12,"character":2},{"type":"hover","text":"interface FormattedDate","start":249,"length":13,"target":"FormattedDate","line":12,"character":16},{"type":"hover","text":"(property) Data.readingTime: number","start":265,"length":11,"target":"readingTime","line":13,"character":2},{"type":"hover","text":"(property) Data.tags: string[]","start":287,"length":4,"target":"tags","line":14,"character":2},{"type":"hover","text":"(property) Data.html?: string | undefined","start":304,"length":4,"target":"html","line":15,"character":2},{"type":"hover","text":"const data: Data[]","start":335,"length":4,"target":"data","line":18,"character":14},{"type":"hover","text":"interface Data","start":341,"length":4,"target":"Data","line":18,"character":20},{"type":"hover","text":"(alias) const data: Data[]\nexport data","start":357,"length":4,"target":"data","line":19,"character":9},{"type":"hover","text":"function formatDate(raw: string): FormattedDate","start":374,"length":10,"target":"formatDate","line":21,"character":9},{"type":"hover","text":"(parameter) raw: string","start":385,"length":3,"target":"raw","line":21,"character":20},{"type":"hover","text":"interface FormattedDate","start":399,"length":13,"target":"FormattedDate","line":21,"character":34},{"type":"hover","text":"const date: Date","start":423,"length":4,"target":"date","line":22,"character":8},{"type":"hover","text":"var Date: DateConstructor\nnew (value: number | string | Date) => Date (+4 overloads)","start":434,"length":4,"target":"Date","line":22,"character":19},{"type":"hover","text":"(parameter) raw: string","start":439,"length":3,"target":"raw","line":22,"character":24},{"type":"hover","text":"(property) FormattedDate.raw: Date","start":459,"length":3,"target":"raw","line":24,"character":4},{"type":"hover","text":"const date: Date","start":464,"length":4,"target":"date","line":24,"character":9},{"type":"hover","text":"(property) FormattedDate.formattedString: string","start":474,"length":15,"target":"formattedString","line":25,"character":4},{"type":"hover","text":"const date: Date","start":491,"length":4,"target":"date","line":25,"character":21},{"type":"hover","text":"(method) Date.toLocaleDateString(locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string (+2 overloads)","docs":"Converts a date to a string by using the current or specified locale.","tags":[["param","locales A locale string, array of locale strings, Intl.Locale object, or array of Intl.Locale objects that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used."],["param","options An object that contains one or more properties that specify comparison options."]],"start":496,"length":18,"target":"toLocaleDateString","line":25,"character":26},{"type":"hover","text":"(property) Intl.DateTimeFormatOptions.year?: \"numeric\" | \"2-digit\" | undefined","start":532,"length":4,"target":"year","line":26,"character":6},{"type":"hover","text":"(property) Intl.DateTimeFormatOptions.month?: \"numeric\" | \"2-digit\" | \"long\" | \"short\" | \"narrow\" | undefined","start":555,"length":5,"target":"month","line":27,"character":6},{"type":"hover","text":"(property) Intl.DateTimeFormatOptions.day?: \"numeric\" | \"2-digit\" | undefined","start":579,"length":3,"target":"day","line":28,"character":6},{"type":"hover","text":"function calculateReadingTime(text?: string): number","start":619,"length":20,"target":"calculateReadingTime","line":33,"character":9},{"type":"hover","text":"(parameter) text: string | undefined","start":640,"length":4,"target":"text","line":33,"character":30},{"type":"hover","text":"(parameter) text: string | undefined","start":672,"length":4,"target":"text","line":34,"character":7},{"type":"hover","text":"const WORDS_PER_MINUTE_ZH: 400","start":706,"length":19,"target":"WORDS_PER_MINUTE_ZH","line":38,"character":8},{"type":"hover","text":"const WORDS_PER_MINUTE_EN: 225","start":740,"length":19,"target":"WORDS_PER_MINUTE_EN","line":39,"character":8},{"type":"hover","text":"const BLOCKS_PER_MINUTE_CODE: 1","start":774,"length":22,"target":"BLOCKS_PER_MINUTE_CODE","line":40,"character":8},{"type":"hover","text":"const content: string","start":810,"length":7,"target":"content","line":42,"character":8},{"type":"hover","text":"(parameter) text: string","start":820,"length":4,"target":"text","line":42,"character":18},{"type":"hover","text":"(method) String.replace(searchValue: {\n    [Symbol.replace](string: string, replaceValue: string): string;\n}, replaceValue: string): string (+3 overloads)","docs":"Passes a string and \n{@linkcode \nreplaceValue\n}\n to the `[Symbol.replace]` method on \n{@linkcode \nsearchValue\n}\n. This method is expected to implement its own replacement algorithm.","tags":[["param","searchValue An object that supports searching for and replacing matches within a string."],["param","replaceValue The replacement text."]],"start":830,"length":7,"target":"replace","line":43,"character":5},{"type":"hover","text":"(method) String.replace(searchValue: {\n    [Symbol.replace](string: string, replaceValue: string): string;\n}, replaceValue: string): string (+3 overloads)","docs":"Passes a string and \n{@linkcode \nreplaceValue\n}\n to the `[Symbol.replace]` method on \n{@linkcode \nsearchValue\n}\n. This method is expected to implement its own replacement algorithm.","tags":[["param","searchValue An object that supports searching for and replacing matches within a string."],["param","replaceValue The replacement text."]],"start":887,"length":7,"target":"replace","line":44,"character":5},{"type":"hover","text":"const countZh: number","start":943,"length":7,"target":"countZh","line":46,"character":8},{"type":"hover","text":"const content: string","start":953,"length":7,"target":"content","line":46,"character":18},{"type":"hover","text":"(method) String.match(matcher: {\n    [Symbol.match](string: string): RegExpMatchArray | null;\n}): RegExpMatchArray | null (+1 overload)","docs":"Matches a string or an object that supports being matched against, and returns an array\ncontaining the results of that search, or null if no matches are found.","tags":[["param","matcher An object that supports being matched against."]],"start":961,"length":5,"target":"match","line":46,"character":26},{"type":"hover","text":"(property) Array<string>.length: number | undefined","docs":"Gets or sets the length of the array. This is a number one higher than the highest index in the array.","start":988,"length":6,"target":"length","line":46,"character":53},{"type":"hover","text":"const countEn: number","start":1008,"length":7,"target":"countEn","line":47,"character":8},{"type":"hover","text":"const content: string","start":1018,"length":7,"target":"content","line":47,"character":18},{"type":"hover","text":"(method) String.match(matcher: {\n    [Symbol.match](string: string): RegExpMatchArray | null;\n}): RegExpMatchArray | null (+1 overload)","docs":"Matches a string or an object that supports being matched against, and returns an array\ncontaining the results of that search, or null if no matches are found.","tags":[["param","matcher An object that supports being matched against."]],"start":1026,"length":5,"target":"match","line":47,"character":26},{"type":"hover","text":"(property) Array<string>.length: number | undefined","docs":"Gets or sets the length of the array. This is a number one higher than the highest index in the array.","start":1044,"length":6,"target":"length","line":47,"character":44},{"type":"hover","text":"const countCodeBlocks: number","start":1064,"length":15,"target":"countCodeBlocks","line":48,"character":8},{"type":"hover","text":"const content: string","start":1082,"length":7,"target":"content","line":48,"character":26},{"type":"hover","text":"(method) String.match(matcher: {\n    [Symbol.match](string: string): RegExpMatchArray | null;\n}): RegExpMatchArray | null (+1 overload)","docs":"Matches a string or an object that supports being matched against, and returns an array\ncontaining the results of that search, or null if no matches are found.","tags":[["param","matcher An object that supports being matched against."]],"start":1090,"length":5,"target":"match","line":48,"character":34},{"type":"hover","text":"(property) Array<string>.length: number | undefined","docs":"Gets or sets the length of the array. This is a number one higher than the highest index in the array.","start":1116,"length":6,"target":"length","line":48,"character":60},{"type":"hover","text":"const minutes: number","start":1137,"length":7,"target":"minutes","line":50,"character":8},{"type":"hover","text":"var Math: Math","docs":"An intrinsic object that provides basic mathematics functionality and constants.","start":1147,"length":4,"target":"Math","line":50,"character":18},{"type":"hover","text":"(method) Math.ceil(x: number): number","docs":"Returns the smallest integer greater than or equal to its numeric argument.","tags":[["param","x A numeric expression."]],"start":1152,"length":4,"target":"ceil","line":50,"character":23},{"type":"hover","text":"const countZh: number","start":1162,"length":7,"target":"countZh","line":51,"character":4},{"type":"hover","text":"const WORDS_PER_MINUTE_ZH: 400","start":1172,"length":19,"target":"WORDS_PER_MINUTE_ZH","line":51,"character":14},{"type":"hover","text":"const countEn: number","start":1198,"length":7,"target":"countEn","line":52,"character":6},{"type":"hover","text":"const WORDS_PER_MINUTE_EN: 225","start":1208,"length":19,"target":"WORDS_PER_MINUTE_EN","line":52,"character":16},{"type":"hover","text":"const countCodeBlocks: number","start":1234,"length":15,"target":"countCodeBlocks","line":53,"character":6},{"type":"hover","text":"const BLOCKS_PER_MINUTE_CODE: 1","start":1252,"length":22,"target":"BLOCKS_PER_MINUTE_CODE","line":53,"character":24},{"type":"hover","text":"const minutes: number","start":1290,"length":7,"target":"minutes","line":56,"character":9},{"type":"hover","text":"function dealTagHierarchy(tag: string): string[]","start":1310,"length":16,"target":"dealTagHierarchy","line":59,"character":9},{"type":"hover","text":"(parameter) tag: string","start":1327,"length":3,"target":"tag","line":59,"character":26},{"type":"hover","text":"const tags: Set<string>","start":1360,"length":4,"target":"tags","line":60,"character":8},{"type":"hover","text":"var Set: SetConstructor\nnew <string>(iterable?: Iterable<string> | null | undefined) => Set<string> (+1 overload)","start":1371,"length":3,"target":"Set","line":60,"character":19},{"type":"hover","text":"const levels: string[]","start":1393,"length":6,"target":"levels","line":61,"character":8},{"type":"hover","text":"(parameter) tag: string","start":1402,"length":3,"target":"tag","line":61,"character":17},{"type":"hover","text":"(method) String.split(separator: string | RegExp, limit?: number): string[] (+1 overload)","docs":"Split a string into substrings using the specified separator and return them as an array.","tags":[["param","separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned."],["param","limit A value used to limit the number of elements returned in the array."]],"start":1406,"length":5,"target":"split","line":61,"character":21},{"type":"hover","text":"const levels: string[]","start":1419,"length":6,"target":"levels","line":62,"character":2},{"type":"hover","text":"(method) Array<string>.forEach(callbackfn: (value: string, index: number, array: string[]) => void, thisArg?: any): void","docs":"Performs the specified action for each element in an array.","tags":[["param","callbackfn A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array."],["param","thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value."]],"start":1426,"length":7,"target":"forEach","line":62,"character":9},{"type":"hover","text":"(parameter) _: string","start":1435,"length":1,"target":"_","line":62,"character":18},{"type":"hover","text":"(parameter) i: number","start":1446,"length":1,"target":"i","line":62,"character":29},{"type":"hover","text":"const tags: Set<string>","start":1466,"length":4,"target":"tags","line":63,"character":4},{"type":"hover","text":"(method) Set<string>.add(value: string): Set<string>","docs":"Appends a new element with a specified value to the end of the Set.","start":1471,"length":3,"target":"add","line":63,"character":9},{"type":"hover","text":"const levels: string[]","start":1475,"length":6,"target":"levels","line":63,"character":13},{"type":"hover","text":"(method) Array<string>.slice(start?: number, end?: number): string[]","docs":"Returns a copy of a section of an array.\nFor both start and end, a negative index can be used to indicate an offset from the end of the array.\nFor example, -2 refers to the second to last element of the array.","tags":[["param","start The beginning index of the specified portion of the array.\nIf start is undefined, then the slice begins at index 0."],["param","end The end index of the specified portion of the array. This is exclusive of the element at the index 'end'.\nIf end is undefined, then the slice extends to the end of the array."]],"start":1482,"length":5,"target":"slice","line":63,"character":20},{"type":"hover","text":"(parameter) i: number","start":1491,"length":1,"target":"i","line":63,"character":29},{"type":"hover","text":"(method) Array<string>.join(separator?: string): string","docs":"Adds all the elements of an array into a string, separated by the specified separator string.","tags":[["param","separator A string used to separate one element of the array from the next in the resulting string. If omitted, the array elements are separated with a comma."]],"start":1498,"length":4,"target":"join","line":63,"character":36},{"type":"hover","text":"var Array: ArrayConstructor","start":1524,"length":5,"target":"Array","line":66,"character":9},{"type":"hover","text":"(method) ArrayConstructor.from<string>(iterable: Iterable<string> | ArrayLike<string>): string[] (+3 overloads)","docs":"Creates an array from an iterable object.","tags":[["param","iterable An iterable object to convert to an array."]],"start":1530,"length":4,"target":"from","line":66,"character":15},{"type":"hover","text":"const tags: Set<string>","start":1535,"length":4,"target":"tags","line":66,"character":20},{"type":"hover","text":"function getTags(html: string | undefined, frontmatter: Record<string, any>): string[]","start":1553,"length":7,"target":"getTags","line":69,"character":9},{"type":"hover","text":"(parameter) html: string | undefined","start":1561,"length":4,"target":"html","line":69,"character":17},{"type":"hover","text":"(parameter) frontmatter: Record<string, any>","start":1587,"length":11,"target":"frontmatter","line":69,"character":43},{"type":"hover","text":"type Record<K extends keyof any, T> = { [P in K]: T; }","docs":"Construct a type with a set of properties K of type T","start":1600,"length":6,"target":"Record","line":69,"character":56},{"type":"hover","text":"(parameter) html: string | undefined","start":1640,"length":4,"target":"html","line":70,"character":7},{"type":"hover","text":"const tags: Set<string>","start":1675,"length":4,"target":"tags","line":74,"character":8},{"type":"hover","text":"interface Set<T>","start":1681,"length":3,"target":"Set","line":74,"character":14},{"type":"hover","text":"var Set: SetConstructor\nnew <string>(iterable?: Iterable<string> | null | undefined) => Set<string> (+1 overload)","start":1699,"length":3,"target":"Set","line":74,"character":32},{"type":"hover","text":"const tagReg: RegExp","start":1713,"length":6,"target":"tagReg","line":75,"character":8},{"type":"hover","text":"let match: RegExpExecArray | null","start":1798,"length":5,"target":"match","line":76,"character":6},{"type":"hover","text":"interface RegExpExecArray","start":1805,"length":15,"target":"RegExpExecArray","line":76,"character":13},{"type":"hover","text":"const tagReg: RegExp","start":1830,"length":6,"target":"tagReg","line":76,"character":38},{"type":"hover","text":"(method) RegExp.exec(string: string): RegExpExecArray | null","docs":"Executes a search on a string using a regular expression pattern, and returns an array containing the results of that search.","tags":[["param","string The String object or string literal on which to perform the search."]],"start":1837,"length":4,"target":"exec","line":76,"character":45},{"type":"hover","text":"(parameter) html: string","start":1842,"length":4,"target":"html","line":76,"character":50},{"type":"hover","text":"let match: RegExpExecArray | null","start":1858,"length":5,"target":"match","line":78,"character":9},{"type":"hover","text":"const tags: Set<string>","start":1871,"length":4,"target":"tags","line":79,"character":4},{"type":"hover","text":"(method) Set<string>.add(value: string): Set<string>","docs":"Appends a new element with a specified value to the end of the Set.","start":1876,"length":3,"target":"add","line":79,"character":9},{"type":"hover","text":"let match: RegExpExecArray","start":1880,"length":5,"target":"match","line":79,"character":13},{"type":"hover","text":"function dealTagHierarchy(tag: string): string[]","start":1894,"length":16,"target":"dealTagHierarchy","line":80,"character":4},{"type":"hover","text":"let match: RegExpExecArray","start":1911,"length":5,"target":"match","line":80,"character":21},{"type":"hover","text":"(method) Array<string>.forEach(callbackfn: (value: string, index: number, array: string[]) => void, thisArg?: any): void","docs":"Performs the specified action for each element in an array.","tags":[["param","callbackfn A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array."],["param","thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value."]],"start":1921,"length":7,"target":"forEach","line":80,"character":31},{"type":"hover","text":"(parameter) tag: string","start":1929,"length":3,"target":"tag","line":80,"character":39},{"type":"hover","text":"const tags: Set<string>","start":1936,"length":4,"target":"tags","line":80,"character":46},{"type":"hover","text":"(method) Set<string>.add(value: string): Set<string>","docs":"Appends a new element with a specified value to the end of the Set.","start":1941,"length":3,"target":"add","line":80,"character":51},{"type":"hover","text":"(parameter) tag: string","start":1945,"length":3,"target":"tag","line":80,"character":55},{"type":"hover","text":"let match: RegExpExecArray | null","start":1955,"length":5,"target":"match","line":81,"character":4},{"type":"hover","text":"const tagReg: RegExp","start":1963,"length":6,"target":"tagReg","line":81,"character":12},{"type":"hover","text":"(method) RegExp.exec(string: string): RegExpExecArray | null","docs":"Executes a search on a string using a regular expression pattern, and returns an array containing the results of that search.","tags":[["param","string The String object or string literal on which to perform the search."]],"start":1970,"length":4,"target":"exec","line":81,"character":19},{"type":"hover","text":"(parameter) html: string","start":1975,"length":4,"target":"html","line":81,"character":24},{"type":"hover","text":"(parameter) frontmatter: Record<string, any>","start":1992,"length":11,"target":"frontmatter","line":84,"character":6},{"type":"hover","text":"any","start":2004,"length":4,"target":"tags","line":84,"character":18},{"type":"hover","text":"const tag: any","start":2027,"length":3,"target":"tag","line":85,"character":15},{"type":"hover","text":"(parameter) frontmatter: Record<string, any>","start":2034,"length":11,"target":"frontmatter","line":85,"character":22},{"type":"hover","text":"any","start":2046,"length":4,"target":"tags","line":85,"character":34},{"type":"hover","text":"function dealTagHierarchy(tag: string): string[]","start":2060,"length":16,"target":"dealTagHierarchy","line":86,"character":6},{"type":"hover","text":"const tag: any","start":2077,"length":3,"target":"tag","line":86,"character":23},{"type":"hover","text":"(method) Array<string>.forEach(callbackfn: (value: string, index: number, array: string[]) => void, thisArg?: any): void","docs":"Performs the specified action for each element in an array.","tags":[["param","callbackfn A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array."],["param","thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value."]],"start":2082,"length":7,"target":"forEach","line":86,"character":28},{"type":"hover","text":"(parameter) tag: string","start":2090,"length":3,"target":"tag","line":86,"character":36},{"type":"hover","text":"const tags: Set<string>","start":2097,"length":4,"target":"tags","line":86,"character":43},{"type":"hover","text":"(method) Set<string>.add(value: string): Set<string>","docs":"Appends a new element with a specified value to the end of the Set.","start":2102,"length":3,"target":"add","line":86,"character":48},{"type":"hover","text":"(parameter) tag: string","start":2106,"length":3,"target":"tag","line":86,"character":52},{"type":"hover","text":"var Array: ArrayConstructor","start":2132,"length":5,"target":"Array","line":90,"character":9},{"type":"hover","text":"(method) ArrayConstructor.from<string>(iterable: Iterable<string> | ArrayLike<string>): string[] (+3 overloads)","docs":"Creates an array from an iterable object.","tags":[["param","iterable An iterable object to convert to an array."]],"start":2138,"length":4,"target":"from","line":90,"character":15},{"type":"hover","text":"const tags: Set<string>","start":2143,"length":4,"target":"tags","line":90,"character":20},{"type":"hover","text":"(alias) createContentLoader<{\n    html: string | undefined;\n    url: string;\n    frontmatter: Record<string, any>;\n    excerpt: string | undefined;\n    created: FormattedDate;\n    lastModified: FormattedDate;\n    readingTime: number;\n    tags: string[];\n}[]>(pattern: string | string[], { includeSrc, render, excerpt: renderExcerpt, transform, globOptions }?: ContentOptions<...> | undefined): {\n    ...;\n}\nimport createContentLoader","docs":"Create a loader object that can be directly used as the default export\nof a data loader file.","start":2167,"length":19,"target":"createContentLoader","line":93,"character":15},{"type":"hover","text":"(property) ContentOptions<T = ContentData[]>.render?: boolean | undefined","docs":"Render src to HTML and include in data?","tags":[["default","false"]],"start":2217,"length":6,"target":"render","line":95,"character":2},{"type":"hover","text":"(property) ContentOptions<{ html: string | undefined; url: string; frontmatter: Record<string, any>; excerpt: string | undefined; created: FormattedDate; lastModified: FormattedDate; readingTime: number; tags: string[]; }[]>.transform?: ((data: ContentData[]) => {\n    html: string | undefined;\n    url: string;\n    frontmatter: Record<string, any>;\n    excerpt: string | undefined;\n    created: FormattedDate;\n    lastModified: FormattedDate;\n    readingTime: number;\n    tags: string[];\n}[] | Promise<...>) | undefined","docs":"Transform the data. Note the data will be inlined as JSON in the client\nbundle if imported from components or markdown files.","start":2233,"length":9,"target":"transform","line":96,"character":2},{"type":"hover","text":"(parameter) raw: ContentData[]","start":2243,"length":3,"target":"raw","line":96,"character":12},{"type":"hover","text":"(parameter) raw: ContentData[]","start":2261,"length":3,"target":"raw","line":97,"character":11},{"type":"hover","text":"(method) Array<ContentData>.map<{\n    html: string | undefined;\n    url: string;\n    frontmatter: Record<string, any>;\n    excerpt: string | undefined;\n    created: FormattedDate;\n    lastModified: FormattedDate;\n    readingTime: number;\n    tags: string[];\n}>(callbackfn: (value: ContentData, index: number, array: ContentData[]) => {\n    html: string | undefined;\n    url: string;\n    frontmatter: Record<string, any>;\n    excerpt: string | undefined;\n    created: FormattedDate;\n    lastModified: FormattedDate;\n    readingTime: number;\n    tags: string[];\n}, thisArg?: any): {\n    html: string | undefined;\n    url: string;\n    frontmatter: Record<string, any>;\n    excerpt: string | undefined;\n    created: FormattedDate;\n    lastModified: FormattedDate;\n    readingTime: number;\n    tags: string[];\n}[]","docs":"Calls a defined callback function on each element of an array, and returns an array that contains the results.","tags":[["param","callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array."],["param","thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value."]],"start":2265,"length":3,"target":"map","line":97,"character":15},{"type":"hover","text":"(parameter) html: string | undefined","start":2272,"length":4,"target":"html","line":97,"character":22},{"type":"hover","text":"(parameter) url: string","start":2278,"length":3,"target":"url","line":97,"character":28},{"type":"hover","text":"(parameter) frontmatter: Record<string, any>","start":2283,"length":11,"target":"frontmatter","line":97,"character":33},{"type":"hover","text":"(parameter) excerpt: string | undefined","start":2296,"length":7,"target":"excerpt","line":97,"character":46},{"type":"hover","text":"(parameter) src: string | undefined","start":2305,"length":3,"target":"src","line":97,"character":55},{"type":"hover","text":"(property) html: string | undefined","start":2324,"length":4,"target":"html","line":98,"character":6},{"type":"hover","text":"(property) url: string","start":2336,"length":3,"target":"url","line":99,"character":6},{"type":"hover","text":"(property) frontmatter: Record<string, any>","start":2347,"length":11,"target":"frontmatter","line":100,"character":6},{"type":"hover","text":"(property) excerpt: string | undefined","start":2366,"length":7,"target":"excerpt","line":101,"character":6},{"type":"hover","text":"(property) created: FormattedDate","start":2381,"length":7,"target":"created","line":102,"character":6},{"type":"hover","text":"function formatDate(raw: string): FormattedDate","start":2390,"length":10,"target":"formatDate","line":102,"character":15},{"type":"hover","text":"(parameter) frontmatter: Record<string, any>","start":2401,"length":11,"target":"frontmatter","line":102,"character":26},{"type":"hover","text":"any","start":2413,"length":7,"target":"created","line":102,"character":38},{"type":"hover","text":"(property) lastModified: FormattedDate","start":2429,"length":12,"target":"lastModified","line":103,"character":6},{"type":"hover","text":"function formatDate(raw: string): FormattedDate","start":2443,"length":10,"target":"formatDate","line":103,"character":20},{"type":"hover","text":"(parameter) frontmatter: Record<string, any>","start":2454,"length":11,"target":"frontmatter","line":103,"character":31},{"type":"hover","text":"any","start":2466,"length":13,"target":"last_modified","line":103,"character":43},{"type":"hover","text":"(property) readingTime: number","start":2488,"length":11,"target":"readingTime","line":104,"character":6},{"type":"hover","text":"function calculateReadingTime(text?: string): number","start":2501,"length":20,"target":"calculateReadingTime","line":104,"character":19},{"type":"hover","text":"(parameter) src: string | undefined","start":2522,"length":3,"target":"src","line":104,"character":40},{"type":"hover","text":"(property) tags: string[]","start":2534,"length":4,"target":"tags","line":105,"character":6},{"type":"hover","text":"function getTags(html: string | undefined, frontmatter: Record<string, any>): string[]","start":2540,"length":7,"target":"getTags","line":105,"character":12},{"type":"hover","text":"(parameter) html: string | undefined","start":2548,"length":4,"target":"html","line":105,"character":20},{"type":"hover","text":"(parameter) frontmatter: Record<string, any>","start":2554,"length":11,"target":"frontmatter","line":105,"character":26},{"type":"hover","text":"(method) Array<{ html: string | undefined; url: string; frontmatter: Record<string, any>; excerpt: string | undefined; created: FormattedDate; lastModified: FormattedDate; readingTime: number; tags: string[]; }>.sort(compareFn?: ((a: {\n    html: string | undefined;\n    url: string;\n    frontmatter: Record<string, any>;\n    excerpt: string | undefined;\n    created: FormattedDate;\n    lastModified: FormattedDate;\n    readingTime: number;\n    tags: string[];\n}, b: {\n    html: string | undefined;\n    url: string;\n    frontmatter: Record<string, any>;\n    excerpt: string | undefined;\n    created: FormattedDate;\n    lastModified: FormattedDate;\n    readingTime: number;\n    tags: string[];\n}) => number) | undefined): {\n    html: string | undefined;\n    url: string;\n    frontmatter: Record<string, any>;\n    excerpt: string | undefined;\n    created: FormattedDate;\n    lastModified: FormattedDate;\n    readingTime: number;\n    tags: string[];\n}[]","docs":"Sorts an array in place.\nThis method mutates the array and returns a reference to the same array.","tags":[["param","compareFn Function used to determine the order of the elements. It is expected to return\na negative value if the first argument is less than the second argument, zero if they're equal, and a positive\nvalue otherwise. If omitted, the elements are sorted in ascending, UTF-16 code unit order.\n```ts\n[11,2,22,1].sort((a, b) => a - b)\n```"]],"start":2583,"length":4,"target":"sort","line":107,"character":7},{"type":"hover","text":"(parameter) a: {\n    html: string | undefined;\n    url: string;\n    frontmatter: Record<string, any>;\n    excerpt: string | undefined;\n    created: FormattedDate;\n    lastModified: FormattedDate;\n    readingTime: number;\n    tags: string[];\n}","start":2589,"length":1,"target":"a","line":107,"character":13},{"type":"hover","text":"(parameter) b: {\n    html: string | undefined;\n    url: string;\n    frontmatter: Record<string, any>;\n    excerpt: string | undefined;\n    created: FormattedDate;\n    lastModified: FormattedDate;\n    readingTime: number;\n    tags: string[];\n}","start":2592,"length":1,"target":"b","line":107,"character":16},{"type":"hover","text":"(parameter) b: {\n    html: string | undefined;\n    url: string;\n    frontmatter: Record<string, any>;\n    excerpt: string | undefined;\n    created: FormattedDate;\n    lastModified: FormattedDate;\n    readingTime: number;\n    tags: string[];\n}","start":2598,"length":1,"target":"b","line":107,"character":22},{"type":"hover","text":"(property) created: FormattedDate","start":2600,"length":7,"target":"created","line":107,"character":24},{"type":"hover","text":"(property) FormattedDate.raw: Date","start":2608,"length":3,"target":"raw","line":107,"character":32},{"type":"hover","text":"(method) Date.getTime(): number","docs":"Returns the stored time value in milliseconds since midnight, January 1, 1970 UTC.","start":2612,"length":7,"target":"getTime","line":107,"character":36},{"type":"hover","text":"(parameter) a: {\n    html: string | undefined;\n    url: string;\n    frontmatter: Record<string, any>;\n    excerpt: string | undefined;\n    created: FormattedDate;\n    lastModified: FormattedDate;\n    readingTime: number;\n    tags: string[];\n}","start":2624,"length":1,"target":"a","line":107,"character":48},{"type":"hover","text":"(property) created: FormattedDate","start":2626,"length":7,"target":"created","line":107,"character":50},{"type":"hover","text":"(property) FormattedDate.raw: Date","start":2634,"length":3,"target":"raw","line":107,"character":58},{"type":"hover","text":"(method) Date.getTime(): number","docs":"Returns the stored time value in milliseconds since midnight, January 1, 1970 UTC.","start":2638,"length":7,"target":"getTime","line":107,"character":62}],"tags":[]}