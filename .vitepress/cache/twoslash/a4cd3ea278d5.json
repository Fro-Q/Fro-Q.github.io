{"code":"<script setup lang=\"ts\">\nimport { onMounted, ref, triggerRef } from \"vue\";\n\nconst htmlEl: HTMLElement | null = document.querySelector(\"html\");\n\nif (!htmlEl) {  // [!code ++:3]\n  throw new Error(\"HTML element not found\");\n}\n\nlet darkMode = ref({\n  get state(): boolean {\n    return htmlEl.classList.contains(\"dark\");\n  },\n\n  set state(value: boolean) {\n    toggleDarkClass(value);\n  },\n});\n\nconst toggleDarkClass = (value: boolean) => {\n  if (value) {\n    htmlEl.classList.add(\"dark\");\n  } else {\n    htmlEl.classList.remove(\"dark\");\n  }\n};\n</script>\n\n<template>\n  <!-- ... -->\n</template>","nodes":[{"type":"hover","text":"(alias) const onMounted: CreateHook<any>\nimport onMounted","start":34,"length":9,"target":"onMounted","line":1,"character":9},{"type":"hover","text":"(alias) function ref<T>(value: T): [T] extends [Ref] ? IfAny<T, Ref<T>, T> : Ref<UnwrapRef<T>, UnwrapRef<T> | T> (+1 overload)\nimport ref","docs":"Takes an inner value and returns a reactive and mutable ref object, which\nhas a single property `.value` that points to the inner value.","tags":[["param","value - The object to wrap in the ref."],["see","{@link https://vuejs.org/api/reactivity-core.html#ref}"]],"start":45,"length":3,"target":"ref","line":1,"character":20},{"type":"hover","text":"(alias) function triggerRef(ref: Ref): void\nimport triggerRef","docs":"Force trigger effects that depends on a shallow ref. This is typically used\nafter making deep mutations to the inner value of a shallow ref.","tags":[["example","```js\nconst shallow = shallowRef({\n  greet: 'Hello, world'\n})\n\n// Logs \"Hello, world\" once for the first run-through\nwatchEffect(() => {\n  console.log(shallow.value.greet)\n})\n\n// This won't trigger the effect because the ref is shallow\nshallow.value.greet = 'Hello, universe'\n\n// Logs \"Hello, universe\"\ntriggerRef(shallow)\n```"],["param","ref - The ref whose tied effects shall be executed."],["see","{@link https://vuejs.org/api/reactivity-advanced.html#triggerref}"]],"start":50,"length":10,"target":"triggerRef","line":1,"character":25},{"type":"hover","text":"const htmlEl: HTMLElement | null","start":82,"length":6,"target":"htmlEl","line":3,"character":6},{"type":"query","text":"const htmlEl: HTMLElement | null","start":82,"length":6,"target":"htmlEl","line":3,"character":6},{"type":"hover","text":"interface HTMLElement","docs":"Any HTML element. Some elements directly implement this interface, while others implement it via an interface that inherits it.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement)","start":90,"length":11,"target":"HTMLElement","line":3,"character":14},{"type":"hover","text":"var document: Document","docs":"[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/document)","start":111,"length":8,"target":"document","line":3,"character":35},{"type":"hover","text":"(method) ParentNode.querySelector<\"html\">(selectors: \"html\"): HTMLHtmlElement | null (+4 overloads)","docs":"Returns the first element that is a descendant of node that matches selectors.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/querySelector)","start":120,"length":13,"target":"querySelector","line":3,"character":44},{"type":"hover","text":"const htmlEl: HTMLElement | null","start":149,"length":6,"target":"htmlEl","line":5,"character":5},{"type":"hover","text":"var Error: ErrorConstructor\nnew (message?: string, options?: ErrorOptions) => Error (+1 overload)","start":188,"length":5,"target":"Error","line":6,"character":12},{"type":"hover","text":"let darkMode: Ref<{\n    state: boolean;\n}, {\n    state: boolean;\n} | {\n    state: boolean;\n}>","start":228,"length":8,"target":"darkMode","line":9,"character":4},{"type":"hover","text":"(alias) ref<{\n    state: boolean;\n}>(value: {\n    state: boolean;\n}): Ref<{\n    state: boolean;\n}, {\n    state: boolean;\n} | {\n    state: boolean;\n}> (+1 overload)\nimport ref","docs":"Takes an inner value and returns a reactive and mutable ref object, which\nhas a single property `.value` that points to the inner value.","tags":[["param","value - The object to wrap in the ref."],["see","{@link https://vuejs.org/api/reactivity-core.html#ref}"]],"start":239,"length":3,"target":"ref","line":9,"character":15},{"type":"hover","text":"(getter) state: boolean","start":251,"length":5,"target":"state","line":10,"character":6},{"type":"hover","text":"const htmlEl: HTMLElement","start":281,"length":6,"target":"htmlEl","line":11,"character":11},{"type":"query","text":"const htmlEl: HTMLElement","start":281,"length":6,"target":"htmlEl","line":11,"character":11},{"type":"hover","text":"(property) Element.classList: DOMTokenList","docs":"Allows for manipulation of element's class content attribute as a set of whitespace-separated tokens through a DOMTokenList object.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/classList)","start":288,"length":9,"target":"classList","line":11,"character":18},{"type":"hover","text":"(method) DOMTokenList.contains(token: string): boolean","docs":"Returns true if token is present, and false otherwise.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMTokenList/contains)","start":298,"length":8,"target":"contains","line":11,"character":28},{"type":"hover","text":"(setter) state: boolean","start":328,"length":5,"target":"state","line":14,"character":6},{"type":"hover","text":"(parameter) value: boolean","start":334,"length":5,"target":"value","line":14,"character":12},{"type":"hover","text":"const toggleDarkClass: (value: boolean) => void","start":356,"length":15,"target":"toggleDarkClass","line":15,"character":4},{"type":"hover","text":"(parameter) value: boolean","start":372,"length":5,"target":"value","line":15,"character":20},{"type":"hover","text":"const toggleDarkClass: (value: boolean) => void","start":396,"length":15,"target":"toggleDarkClass","line":19,"character":6},{"type":"hover","text":"(parameter) value: boolean","start":415,"length":5,"target":"value","line":19,"character":25},{"type":"hover","text":"(parameter) value: boolean","start":442,"length":5,"target":"value","line":20,"character":6},{"type":"hover","text":"const htmlEl: HTMLElement","start":455,"length":6,"target":"htmlEl","line":21,"character":4},{"type":"hover","text":"(property) Element.classList: DOMTokenList","docs":"Allows for manipulation of element's class content attribute as a set of whitespace-separated tokens through a DOMTokenList object.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/classList)","start":462,"length":9,"target":"classList","line":21,"character":11},{"type":"hover","text":"(method) DOMTokenList.add(...tokens: string[]): void","docs":"Adds all arguments passed, except those already present.\n\nThrows a \"SyntaxError\" DOMException if one of the arguments is the empty string.\n\nThrows an \"InvalidCharacterError\" DOMException if one of the arguments contains any ASCII whitespace.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMTokenList/add)","start":472,"length":3,"target":"add","line":21,"character":21},{"type":"hover","text":"const htmlEl: HTMLElement","start":500,"length":6,"target":"htmlEl","line":23,"character":4},{"type":"hover","text":"(property) Element.classList: DOMTokenList","docs":"Allows for manipulation of element's class content attribute as a set of whitespace-separated tokens through a DOMTokenList object.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/classList)","start":507,"length":9,"target":"classList","line":23,"character":11},{"type":"hover","text":"(method) DOMTokenList.remove(...tokens: string[]): void","docs":"Removes arguments passed, if they are present.\n\nThrows a \"SyntaxError\" DOMException if one of the arguments is the empty string.\n\nThrows an \"InvalidCharacterError\" DOMException if one of the arguments contains any ASCII whitespace.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMTokenList/remove)","start":517,"length":6,"target":"remove","line":23,"character":21}],"meta":{"extension":"vue","compilerOptions":{"strict":true,"module":99,"target":99,"allowJs":true,"skipDefaultLibCheck":true,"skipLibCheck":true,"moduleDetection":3,"baseUrl":"/Users/jayqing/Areas/blog_example/typescript_example_site/","jsx":1,"jsxImportSource":"vue","noImplicitAny":false,"moduleResolution":100},"handbookOptions":{"errors":[],"noErrors":false,"noErrorsCutted":true,"noErrorValidation":false,"noStaticSemanticInfo":false,"showEmit":false,"keepNotations":true},"removals":[[325,339],[143,152]],"flagNotations":[],"virtualFiles":[{"offset":0,"filename":"index.tsx","filepath":"/Users/jayqing/Areas/blog_example/typescript_example_site/index.tsx","content":"/// <reference types=\"./node_modules/.vue-global-types/vue_99_0_0_0.d.ts\" />\n\nimport { onMounted, ref, triggerRef } from \"vue\";\n\nconst htmlEl: HTMLElement | null = document.querySelector(\"html\");\n        \n\nif (!htmlEl) {  // [!code ++:3]\n  throw new Error(\"HTML element not found\");\n}\n\nlet darkMode = ref({\n  get state(): boolean {\n    return htmlEl.classList.contains(\"dark\");\n             \n  },\n\n  set state(value: boolean) {\n    toggleDarkClass(value);\n  },\n});\n\nconst toggleDarkClass = (value: boolean) => {\n  if (value) {\n    htmlEl.classList.add(\"dark\");\n  } else {\n    htmlEl.classList.remove(\"dark\");\n  }\n};\n;/* PartiallyEnd: #3632/scriptSetup.vue */\n// @ts-ignore\ndeclare const { defineProps, defineSlots, defineEmits, defineExpose, defineModel, defineOptions, withDefaults, }: typeof import('vue');\ntype __VLS_PublicProps = {};\nconst __VLS_ctx = {} as InstanceType<__VLS_PickNotAny<typeof __VLS_self, new () => {}>>;\ntype __VLS_LocalComponents = & typeof __VLS_ctx;\nlet __VLS_components!: __VLS_LocalComponents & __VLS_GlobalComponents;\ntype __VLS_LocalDirectives = & typeof __VLS_ctx;\nlet __VLS_directives!: __VLS_LocalDirectives & __VLS_GlobalDirectives;\ntype __VLS_Slots = __VLS_PrettifyGlobal<__VLS_OmitStringIndex<typeof __VLS_ctx.$slots>>;\ntype __VLS_InheritedAttrs = {};\ntype __VLS_TemplateRefs = {\n};\ntype __VLS_RootEl = any;\nvar __VLS_dollars!: {\n$slots: __VLS_Slots;\n$attrs: import('vue').ComponentPublicInstance['$attrs'] & Partial<__VLS_InheritedAttrs>;\n$refs: __VLS_TemplateRefs;\n$el: __VLS_RootEl;\n} & { [K in keyof import('vue').ComponentPublicInstance]: unknown };\nconst __VLS_self = (await import('vue')).defineComponent({\nsetup() {\nreturn {\n};\n},\n});\nexport default (await import('vue')).defineComponent({\nsetup() {\nreturn {\n};\n},\n});\n;/* PartiallyEnd: #4569/main.vue */\ntype __VLS_IntrinsicElementsCompletion = __VLS_IntrinsicElements;\n","extension":"tsx","supportLsp":true}],"positionQueries":[135,343],"positionCompletions":[],"positionHighlights":[]},"queries":[{"type":"query","text":"const htmlEl: HTMLElement | null","start":82,"length":6,"target":"htmlEl","line":3,"character":6},{"type":"query","text":"const htmlEl: HTMLElement","start":281,"length":6,"target":"htmlEl","line":11,"character":11}],"completions":[],"errors":[],"highlights":[],"hovers":[{"type":"hover","text":"(alias) const onMounted: CreateHook<any>\nimport onMounted","start":34,"length":9,"target":"onMounted","line":1,"character":9},{"type":"hover","text":"(alias) function ref<T>(value: T): [T] extends [Ref] ? IfAny<T, Ref<T>, T> : Ref<UnwrapRef<T>, UnwrapRef<T> | T> (+1 overload)\nimport ref","docs":"Takes an inner value and returns a reactive and mutable ref object, which\nhas a single property `.value` that points to the inner value.","tags":[["param","value - The object to wrap in the ref."],["see","{@link https://vuejs.org/api/reactivity-core.html#ref}"]],"start":45,"length":3,"target":"ref","line":1,"character":20},{"type":"hover","text":"(alias) function triggerRef(ref: Ref): void\nimport triggerRef","docs":"Force trigger effects that depends on a shallow ref. This is typically used\nafter making deep mutations to the inner value of a shallow ref.","tags":[["example","```js\nconst shallow = shallowRef({\n  greet: 'Hello, world'\n})\n\n// Logs \"Hello, world\" once for the first run-through\nwatchEffect(() => {\n  console.log(shallow.value.greet)\n})\n\n// This won't trigger the effect because the ref is shallow\nshallow.value.greet = 'Hello, universe'\n\n// Logs \"Hello, universe\"\ntriggerRef(shallow)\n```"],["param","ref - The ref whose tied effects shall be executed."],["see","{@link https://vuejs.org/api/reactivity-advanced.html#triggerref}"]],"start":50,"length":10,"target":"triggerRef","line":1,"character":25},{"type":"hover","text":"const htmlEl: HTMLElement | null","start":82,"length":6,"target":"htmlEl","line":3,"character":6},{"type":"hover","text":"interface HTMLElement","docs":"Any HTML element. Some elements directly implement this interface, while others implement it via an interface that inherits it.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement)","start":90,"length":11,"target":"HTMLElement","line":3,"character":14},{"type":"hover","text":"var document: Document","docs":"[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/document)","start":111,"length":8,"target":"document","line":3,"character":35},{"type":"hover","text":"(method) ParentNode.querySelector<\"html\">(selectors: \"html\"): HTMLHtmlElement | null (+4 overloads)","docs":"Returns the first element that is a descendant of node that matches selectors.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/querySelector)","start":120,"length":13,"target":"querySelector","line":3,"character":44},{"type":"hover","text":"const htmlEl: HTMLElement | null","start":149,"length":6,"target":"htmlEl","line":5,"character":5},{"type":"hover","text":"var Error: ErrorConstructor\nnew (message?: string, options?: ErrorOptions) => Error (+1 overload)","start":188,"length":5,"target":"Error","line":6,"character":12},{"type":"hover","text":"let darkMode: Ref<{\n    state: boolean;\n}, {\n    state: boolean;\n} | {\n    state: boolean;\n}>","start":228,"length":8,"target":"darkMode","line":9,"character":4},{"type":"hover","text":"(alias) ref<{\n    state: boolean;\n}>(value: {\n    state: boolean;\n}): Ref<{\n    state: boolean;\n}, {\n    state: boolean;\n} | {\n    state: boolean;\n}> (+1 overload)\nimport ref","docs":"Takes an inner value and returns a reactive and mutable ref object, which\nhas a single property `.value` that points to the inner value.","tags":[["param","value - The object to wrap in the ref."],["see","{@link https://vuejs.org/api/reactivity-core.html#ref}"]],"start":239,"length":3,"target":"ref","line":9,"character":15},{"type":"hover","text":"(getter) state: boolean","start":251,"length":5,"target":"state","line":10,"character":6},{"type":"hover","text":"const htmlEl: HTMLElement","start":281,"length":6,"target":"htmlEl","line":11,"character":11},{"type":"hover","text":"(property) Element.classList: DOMTokenList","docs":"Allows for manipulation of element's class content attribute as a set of whitespace-separated tokens through a DOMTokenList object.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/classList)","start":288,"length":9,"target":"classList","line":11,"character":18},{"type":"hover","text":"(method) DOMTokenList.contains(token: string): boolean","docs":"Returns true if token is present, and false otherwise.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMTokenList/contains)","start":298,"length":8,"target":"contains","line":11,"character":28},{"type":"hover","text":"(setter) state: boolean","start":328,"length":5,"target":"state","line":14,"character":6},{"type":"hover","text":"(parameter) value: boolean","start":334,"length":5,"target":"value","line":14,"character":12},{"type":"hover","text":"const toggleDarkClass: (value: boolean) => void","start":356,"length":15,"target":"toggleDarkClass","line":15,"character":4},{"type":"hover","text":"(parameter) value: boolean","start":372,"length":5,"target":"value","line":15,"character":20},{"type":"hover","text":"const toggleDarkClass: (value: boolean) => void","start":396,"length":15,"target":"toggleDarkClass","line":19,"character":6},{"type":"hover","text":"(parameter) value: boolean","start":415,"length":5,"target":"value","line":19,"character":25},{"type":"hover","text":"(parameter) value: boolean","start":442,"length":5,"target":"value","line":20,"character":6},{"type":"hover","text":"const htmlEl: HTMLElement","start":455,"length":6,"target":"htmlEl","line":21,"character":4},{"type":"hover","text":"(property) Element.classList: DOMTokenList","docs":"Allows for manipulation of element's class content attribute as a set of whitespace-separated tokens through a DOMTokenList object.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/classList)","start":462,"length":9,"target":"classList","line":21,"character":11},{"type":"hover","text":"(method) DOMTokenList.add(...tokens: string[]): void","docs":"Adds all arguments passed, except those already present.\n\nThrows a \"SyntaxError\" DOMException if one of the arguments is the empty string.\n\nThrows an \"InvalidCharacterError\" DOMException if one of the arguments contains any ASCII whitespace.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMTokenList/add)","start":472,"length":3,"target":"add","line":21,"character":21},{"type":"hover","text":"const htmlEl: HTMLElement","start":500,"length":6,"target":"htmlEl","line":23,"character":4},{"type":"hover","text":"(property) Element.classList: DOMTokenList","docs":"Allows for manipulation of element's class content attribute as a set of whitespace-separated tokens through a DOMTokenList object.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/classList)","start":507,"length":9,"target":"classList","line":23,"character":11},{"type":"hover","text":"(method) DOMTokenList.remove(...tokens: string[]): void","docs":"Removes arguments passed, if they are present.\n\nThrows a \"SyntaxError\" DOMException if one of the arguments is the empty string.\n\nThrows an \"InvalidCharacterError\" DOMException if one of the arguments contains any ASCII whitespace.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMTokenList/remove)","start":517,"length":6,"target":"remove","line":23,"character":21}],"tags":[]}