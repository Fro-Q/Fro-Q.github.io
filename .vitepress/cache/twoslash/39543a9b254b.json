{"code":"import { createContentLoader } from 'vitepress'\n\ninterface FormattedDate {\n  raw: Date\n  formattedString: string\n}\n\ninterface ReadingTimeInfo {\n  minutes: number\n  words: number\n}\n\nexport interface Data {\n  url: string\n  frontmatter: Record<string, any>\n  excerpt?: string\n  created: FormattedDate\n  lastModified: FormattedDate\n  readingInfo: ReadingTimeInfo\n}\n\ndeclare const data: Data[]\nexport { data }\n\nfunction formatDate(raw: string): FormattedDate {\n  const date = new Date(raw)\n  return {\n    raw: date,\n    formattedString: date.toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'numeric',\n      day: 'numeric',\n    }),\n  }\n}\n\nfunction calculateReadingTime(text?: string): ReadingTimeInfo {\n  if (!text) {\n    return { minutes: 0, words: 0 }\n  }\n\n  const WORDS_PER_MINUTE_ZH = 400\n  const WORDS_PER_MINUTE_EN = 225\n  const BLOCKS_PER_MINUTE_CODE = 1\n\n  const content = text\n    .replace(/---[\\s\\S]*?---/, '') // Remove frontmatter\n    .replace(/<[\\s\\S]*?>/g, '') // Remove HTML tags\n\n  const countZh = content.match(/[\\u4E00-\\u9FA5]/g)?.length || 0\n  const countEn = content.match(/[a-z]/gi)?.length || 0\n  const countCodeBlocks = content.match(/```[\\s\\S]*?```/g)?.length || 0\n\n  const minutes = Math.ceil(countZh / WORDS_PER_MINUTE_ZH + countEn / WORDS_PER_MINUTE_EN + countCodeBlocks * BLOCKS_PER_MINUTE_CODE)\n\n  const words = Math.ceil((countZh + countEn) / 100) * 100\n\n  return {\n    minutes,\n    words,\n  }\n}\n\nexport default createContentLoader('posts/*.md', {\n  includeSrc: true,\n  excerpt: true,\n  transform(raw) {\n    return raw.map(({ url, frontmatter, excerpt, src }) => ({\n      url,\n      frontmatter,\n      excerpt,\n      created: formatDate(frontmatter.created),\n      lastModified: formatDate(frontmatter.last_modified),\n      readingInfo: calculateReadingTime(src),\n    }))\n  },\n})","nodes":[{"type":"hover","text":"(alias) function createContentLoader<T = ContentData[]>(pattern: string | string[], { includeSrc, render, excerpt: renderExcerpt, transform, globOptions }?: ContentOptions<T>): {\n    watch: string | string[];\n    load: () => Promise<T>;\n}\nimport createContentLoader","docs":"Create a loader object that can be directly used as the default export\nof a data loader file.","start":9,"length":19,"target":"createContentLoader","line":0,"character":9},{"type":"hover","text":"interface FormattedDate","start":59,"length":13,"target":"FormattedDate","line":2,"character":10},{"type":"hover","text":"(property) FormattedDate.raw: Date","start":77,"length":3,"target":"raw","line":3,"character":2},{"type":"hover","text":"interface Date","docs":"Enables basic storage and retrieval of dates and times.","start":82,"length":4,"target":"Date","line":3,"character":7},{"type":"hover","text":"(property) FormattedDate.formattedString: string","start":89,"length":15,"target":"formattedString","line":4,"character":2},{"type":"hover","text":"interface ReadingTimeInfo","start":126,"length":15,"target":"ReadingTimeInfo","line":7,"character":10},{"type":"hover","text":"(property) ReadingTimeInfo.minutes: number","start":146,"length":7,"target":"minutes","line":8,"character":2},{"type":"hover","text":"(property) ReadingTimeInfo.words: number","start":164,"length":5,"target":"words","line":9,"character":2},{"type":"hover","text":"interface Data","start":198,"length":4,"target":"Data","line":12,"character":17},{"type":"hover","text":"(property) Data.url: string","start":207,"length":3,"target":"url","line":13,"character":2},{"type":"hover","text":"(property) Data.frontmatter: Record<string, any>","start":221,"length":11,"target":"frontmatter","line":14,"character":2},{"type":"hover","text":"type Record<K extends keyof any, T> = { [P in K]: T; }","docs":"Construct a type with a set of properties K of type T","start":234,"length":6,"target":"Record","line":14,"character":15},{"type":"hover","text":"(property) Data.excerpt?: string | undefined","start":256,"length":7,"target":"excerpt","line":15,"character":2},{"type":"hover","text":"(property) Data.created: FormattedDate","start":275,"length":7,"target":"created","line":16,"character":2},{"type":"hover","text":"interface FormattedDate","start":284,"length":13,"target":"FormattedDate","line":16,"character":11},{"type":"hover","text":"(property) Data.lastModified: FormattedDate","start":300,"length":12,"target":"lastModified","line":17,"character":2},{"type":"hover","text":"interface FormattedDate","start":314,"length":13,"target":"FormattedDate","line":17,"character":16},{"type":"hover","text":"(property) Data.readingInfo: ReadingTimeInfo","start":330,"length":11,"target":"readingInfo","line":18,"character":2},{"type":"hover","text":"interface ReadingTimeInfo","start":343,"length":15,"target":"ReadingTimeInfo","line":18,"character":15},{"type":"hover","text":"const data: Data[]","start":376,"length":4,"target":"data","line":21,"character":14},{"type":"hover","text":"interface Data","start":382,"length":4,"target":"Data","line":21,"character":20},{"type":"hover","text":"(alias) const data: Data[]\nexport data","start":398,"length":4,"target":"data","line":22,"character":9},{"type":"hover","text":"function formatDate(raw: string): FormattedDate","start":415,"length":10,"target":"formatDate","line":24,"character":9},{"type":"hover","text":"(parameter) raw: string","start":426,"length":3,"target":"raw","line":24,"character":20},{"type":"hover","text":"interface FormattedDate","start":440,"length":13,"target":"FormattedDate","line":24,"character":34},{"type":"hover","text":"const date: Date","start":464,"length":4,"target":"date","line":25,"character":8},{"type":"hover","text":"var Date: DateConstructor\nnew (value: number | string | Date) => Date (+4 overloads)","start":475,"length":4,"target":"Date","line":25,"character":19},{"type":"hover","text":"(parameter) raw: string","start":480,"length":3,"target":"raw","line":25,"character":24},{"type":"hover","text":"(property) FormattedDate.raw: Date","start":500,"length":3,"target":"raw","line":27,"character":4},{"type":"hover","text":"const date: Date","start":505,"length":4,"target":"date","line":27,"character":9},{"type":"hover","text":"(property) FormattedDate.formattedString: string","start":515,"length":15,"target":"formattedString","line":28,"character":4},{"type":"hover","text":"const date: Date","start":532,"length":4,"target":"date","line":28,"character":21},{"type":"hover","text":"(method) Date.toLocaleDateString(locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string (+2 overloads)","docs":"Converts a date to a string by using the current or specified locale.","tags":[["param","locales A locale string, array of locale strings, Intl.Locale object, or array of Intl.Locale objects that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used."],["param","options An object that contains one or more properties that specify comparison options."]],"start":537,"length":18,"target":"toLocaleDateString","line":28,"character":26},{"type":"hover","text":"(property) Intl.DateTimeFormatOptions.year?: \"numeric\" | \"2-digit\" | undefined","start":573,"length":4,"target":"year","line":29,"character":6},{"type":"hover","text":"(property) Intl.DateTimeFormatOptions.month?: \"numeric\" | \"2-digit\" | \"long\" | \"short\" | \"narrow\" | undefined","start":596,"length":5,"target":"month","line":30,"character":6},{"type":"hover","text":"(property) Intl.DateTimeFormatOptions.day?: \"numeric\" | \"2-digit\" | undefined","start":620,"length":3,"target":"day","line":31,"character":6},{"type":"hover","text":"function calculateReadingTime(text?: string): ReadingTimeInfo","start":660,"length":20,"target":"calculateReadingTime","line":36,"character":9},{"type":"hover","text":"(parameter) text: string | undefined","start":681,"length":4,"target":"text","line":36,"character":30},{"type":"hover","text":"interface ReadingTimeInfo","start":697,"length":15,"target":"ReadingTimeInfo","line":36,"character":46},{"type":"hover","text":"(parameter) text: string | undefined","start":722,"length":4,"target":"text","line":37,"character":7},{"type":"hover","text":"(property) ReadingTimeInfo.minutes: number","start":743,"length":7,"target":"minutes","line":38,"character":13},{"type":"hover","text":"(property) ReadingTimeInfo.words: number","start":755,"length":5,"target":"words","line":38,"character":25},{"type":"hover","text":"const WORDS_PER_MINUTE_ZH: 400","start":779,"length":19,"target":"WORDS_PER_MINUTE_ZH","line":41,"character":8},{"type":"hover","text":"const WORDS_PER_MINUTE_EN: 225","start":813,"length":19,"target":"WORDS_PER_MINUTE_EN","line":42,"character":8},{"type":"hover","text":"const BLOCKS_PER_MINUTE_CODE: 1","start":847,"length":22,"target":"BLOCKS_PER_MINUTE_CODE","line":43,"character":8},{"type":"hover","text":"const content: string","start":883,"length":7,"target":"content","line":45,"character":8},{"type":"hover","text":"(parameter) text: string","start":893,"length":4,"target":"text","line":45,"character":18},{"type":"hover","text":"(method) String.replace(searchValue: {\n    [Symbol.replace](string: string, replaceValue: string): string;\n}, replaceValue: string): string (+3 overloads)","docs":"Passes a string and \n{@linkcode \nreplaceValue\n}\n to the `[Symbol.replace]` method on \n{@linkcode \nsearchValue\n}\n. This method is expected to implement its own replacement algorithm.","tags":[["param","searchValue An object that supports searching for and replacing matches within a string."],["param","replaceValue The replacement text."]],"start":903,"length":7,"target":"replace","line":46,"character":5},{"type":"hover","text":"(method) String.replace(searchValue: {\n    [Symbol.replace](string: string, replaceValue: string): string;\n}, replaceValue: string): string (+3 overloads)","docs":"Passes a string and \n{@linkcode \nreplaceValue\n}\n to the `[Symbol.replace]` method on \n{@linkcode \nsearchValue\n}\n. This method is expected to implement its own replacement algorithm.","tags":[["param","searchValue An object that supports searching for and replacing matches within a string."],["param","replaceValue The replacement text."]],"start":960,"length":7,"target":"replace","line":47,"character":5},{"type":"hover","text":"const countZh: number","start":1016,"length":7,"target":"countZh","line":49,"character":8},{"type":"hover","text":"const content: string","start":1026,"length":7,"target":"content","line":49,"character":18},{"type":"hover","text":"(method) String.match(matcher: {\n    [Symbol.match](string: string): RegExpMatchArray | null;\n}): RegExpMatchArray | null (+1 overload)","docs":"Matches a string or an object that supports being matched against, and returns an array\ncontaining the results of that search, or null if no matches are found.","tags":[["param","matcher An object that supports being matched against."]],"start":1034,"length":5,"target":"match","line":49,"character":26},{"type":"hover","text":"(property) Array<string>.length: number | undefined","docs":"Gets or sets the length of the array. This is a number one higher than the highest index in the array.","start":1061,"length":6,"target":"length","line":49,"character":53},{"type":"hover","text":"const countEn: number","start":1081,"length":7,"target":"countEn","line":50,"character":8},{"type":"hover","text":"const content: string","start":1091,"length":7,"target":"content","line":50,"character":18},{"type":"hover","text":"(method) String.match(matcher: {\n    [Symbol.match](string: string): RegExpMatchArray | null;\n}): RegExpMatchArray | null (+1 overload)","docs":"Matches a string or an object that supports being matched against, and returns an array\ncontaining the results of that search, or null if no matches are found.","tags":[["param","matcher An object that supports being matched against."]],"start":1099,"length":5,"target":"match","line":50,"character":26},{"type":"hover","text":"(property) Array<string>.length: number | undefined","docs":"Gets or sets the length of the array. This is a number one higher than the highest index in the array.","start":1117,"length":6,"target":"length","line":50,"character":44},{"type":"hover","text":"const countCodeBlocks: number","start":1137,"length":15,"target":"countCodeBlocks","line":51,"character":8},{"type":"hover","text":"const content: string","start":1155,"length":7,"target":"content","line":51,"character":26},{"type":"hover","text":"(method) String.match(matcher: {\n    [Symbol.match](string: string): RegExpMatchArray | null;\n}): RegExpMatchArray | null (+1 overload)","docs":"Matches a string or an object that supports being matched against, and returns an array\ncontaining the results of that search, or null if no matches are found.","tags":[["param","matcher An object that supports being matched against."]],"start":1163,"length":5,"target":"match","line":51,"character":34},{"type":"hover","text":"(property) Array<string>.length: number | undefined","docs":"Gets or sets the length of the array. This is a number one higher than the highest index in the array.","start":1189,"length":6,"target":"length","line":51,"character":60},{"type":"hover","text":"const minutes: number","start":1210,"length":7,"target":"minutes","line":53,"character":8},{"type":"hover","text":"var Math: Math","docs":"An intrinsic object that provides basic mathematics functionality and constants.","start":1220,"length":4,"target":"Math","line":53,"character":18},{"type":"hover","text":"(method) Math.ceil(x: number): number","docs":"Returns the smallest integer greater than or equal to its numeric argument.","tags":[["param","x A numeric expression."]],"start":1225,"length":4,"target":"ceil","line":53,"character":23},{"type":"hover","text":"const countZh: number","start":1230,"length":7,"target":"countZh","line":53,"character":28},{"type":"hover","text":"const WORDS_PER_MINUTE_ZH: 400","start":1240,"length":19,"target":"WORDS_PER_MINUTE_ZH","line":53,"character":38},{"type":"hover","text":"const countEn: number","start":1262,"length":7,"target":"countEn","line":53,"character":60},{"type":"hover","text":"const WORDS_PER_MINUTE_EN: 225","start":1272,"length":19,"target":"WORDS_PER_MINUTE_EN","line":53,"character":70},{"type":"hover","text":"const countCodeBlocks: number","start":1294,"length":15,"target":"countCodeBlocks","line":53,"character":92},{"type":"hover","text":"const BLOCKS_PER_MINUTE_CODE: 1","start":1312,"length":22,"target":"BLOCKS_PER_MINUTE_CODE","line":53,"character":110},{"type":"hover","text":"const words: number","start":1345,"length":5,"target":"words","line":55,"character":8},{"type":"hover","text":"var Math: Math","docs":"An intrinsic object that provides basic mathematics functionality and constants.","start":1353,"length":4,"target":"Math","line":55,"character":16},{"type":"hover","text":"(method) Math.ceil(x: number): number","docs":"Returns the smallest integer greater than or equal to its numeric argument.","tags":[["param","x A numeric expression."]],"start":1358,"length":4,"target":"ceil","line":55,"character":21},{"type":"hover","text":"const countZh: number","start":1364,"length":7,"target":"countZh","line":55,"character":27},{"type":"hover","text":"const countEn: number","start":1374,"length":7,"target":"countEn","line":55,"character":37},{"type":"hover","text":"(property) ReadingTimeInfo.minutes: number","start":1412,"length":7,"target":"minutes","line":58,"character":4},{"type":"hover","text":"(property) ReadingTimeInfo.words: number","start":1425,"length":5,"target":"words","line":59,"character":4},{"type":"hover","text":"(alias) createContentLoader<{\n    url: string;\n    frontmatter: Record<string, any>;\n    excerpt: string | undefined;\n    created: FormattedDate;\n    lastModified: FormattedDate;\n    readingInfo: ReadingTimeInfo;\n}[]>(pattern: string | string[], { includeSrc, render, excerpt: renderExcerpt, transform, globOptions }?: ContentOptions<...> | undefined): {\n    ...;\n}\nimport createContentLoader","docs":"Create a loader object that can be directly used as the default export\nof a data loader file.","start":1454,"length":19,"target":"createContentLoader","line":63,"character":15},{"type":"hover","text":"(property) ContentOptions<T = ContentData[]>.includeSrc?: boolean | undefined","docs":"Include src?","tags":[["default","false"]],"start":1492,"length":10,"target":"includeSrc","line":64,"character":2},{"type":"hover","text":"(property) ContentOptions<{ url: string; frontmatter: Record<string, any>; excerpt: string | undefined; created: FormattedDate; lastModified: FormattedDate; readingInfo: ReadingTimeInfo; }[]>.excerpt?: string | boolean | ((file: {\n    data: {\n        [key: string]: any;\n    };\n    content: string;\n    excerpt?: string;\n}, options?: any) => void) | undefined","docs":"If `boolean`, whether to parse and include excerpt? (rendered as HTML)\n\nIf `function`, control how the excerpt is extracted from the content.\n\nIf `string`, define a custom separator to be used for extracting the\nexcerpt. Default separator is `---` if `excerpt` is `true`.","tags":[["see","https://github.com/jonschlinkert/gray-matter#optionsexcerpt"],["see","https://github.com/jonschlinkert/gray-matter#optionsexcerpt_separator"],["default","false"]],"start":1512,"length":7,"target":"excerpt","line":65,"character":2},{"type":"hover","text":"(property) ContentOptions<{ url: string; frontmatter: Record<string, any>; excerpt: string | undefined; created: FormattedDate; lastModified: FormattedDate; readingInfo: ReadingTimeInfo; }[]>.transform?: ((data: ContentData[]) => {\n    url: string;\n    frontmatter: Record<string, any>;\n    excerpt: string | undefined;\n    created: FormattedDate;\n    lastModified: FormattedDate;\n    readingInfo: ReadingTimeInfo;\n}[] | Promise<...>) | undefined","docs":"Transform the data. Note the data will be inlined as JSON in the client\nbundle if imported from components or markdown files.","start":1529,"length":9,"target":"transform","line":66,"character":2},{"type":"hover","text":"(parameter) raw: ContentData[]","start":1539,"length":3,"target":"raw","line":66,"character":12},{"type":"hover","text":"(parameter) raw: ContentData[]","start":1557,"length":3,"target":"raw","line":67,"character":11},{"type":"hover","text":"(method) Array<ContentData>.map<{\n    url: string;\n    frontmatter: Record<string, any>;\n    excerpt: string | undefined;\n    created: FormattedDate;\n    lastModified: FormattedDate;\n    readingInfo: ReadingTimeInfo;\n}>(callbackfn: (value: ContentData, index: number, array: ContentData[]) => {\n    url: string;\n    frontmatter: Record<string, any>;\n    excerpt: string | undefined;\n    created: FormattedDate;\n    lastModified: FormattedDate;\n    readingInfo: ReadingTimeInfo;\n}, thisArg?: any): {\n    url: string;\n    frontmatter: Record<string, any>;\n    excerpt: string | undefined;\n    created: FormattedDate;\n    lastModified: FormattedDate;\n    readingInfo: ReadingTimeInfo;\n}[]","docs":"Calls a defined callback function on each element of an array, and returns an array that contains the results.","tags":[["param","callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array."],["param","thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value."]],"start":1561,"length":3,"target":"map","line":67,"character":15},{"type":"hover","text":"(parameter) url: string","start":1568,"length":3,"target":"url","line":67,"character":22},{"type":"hover","text":"(parameter) frontmatter: Record<string, any>","start":1573,"length":11,"target":"frontmatter","line":67,"character":27},{"type":"hover","text":"(parameter) excerpt: string | undefined","start":1586,"length":7,"target":"excerpt","line":67,"character":40},{"type":"hover","text":"(parameter) src: string | undefined","start":1595,"length":3,"target":"src","line":67,"character":49},{"type":"hover","text":"(property) url: string","start":1614,"length":3,"target":"url","line":68,"character":6},{"type":"hover","text":"(property) frontmatter: Record<string, any>","start":1625,"length":11,"target":"frontmatter","line":69,"character":6},{"type":"hover","text":"(property) excerpt: string | undefined","start":1644,"length":7,"target":"excerpt","line":70,"character":6},{"type":"hover","text":"(property) created: FormattedDate","start":1659,"length":7,"target":"created","line":71,"character":6},{"type":"hover","text":"function formatDate(raw: string): FormattedDate","start":1668,"length":10,"target":"formatDate","line":71,"character":15},{"type":"hover","text":"(parameter) frontmatter: Record<string, any>","start":1679,"length":11,"target":"frontmatter","line":71,"character":26},{"type":"hover","text":"any","start":1691,"length":7,"target":"created","line":71,"character":38},{"type":"hover","text":"(property) lastModified: FormattedDate","start":1707,"length":12,"target":"lastModified","line":72,"character":6},{"type":"hover","text":"function formatDate(raw: string): FormattedDate","start":1721,"length":10,"target":"formatDate","line":72,"character":20},{"type":"hover","text":"(parameter) frontmatter: Record<string, any>","start":1732,"length":11,"target":"frontmatter","line":72,"character":31},{"type":"hover","text":"any","start":1744,"length":13,"target":"last_modified","line":72,"character":43},{"type":"hover","text":"(property) readingInfo: ReadingTimeInfo","start":1766,"length":11,"target":"readingInfo","line":73,"character":6},{"type":"hover","text":"function calculateReadingTime(text?: string): ReadingTimeInfo","start":1779,"length":20,"target":"calculateReadingTime","line":73,"character":19},{"type":"hover","text":"(parameter) src: string | undefined","start":1800,"length":3,"target":"src","line":73,"character":40}],"meta":{"extension":"ts","compilerOptions":{"strict":true,"module":99,"target":99,"allowJs":true,"skipDefaultLibCheck":true,"skipLibCheck":true,"moduleDetection":3,"baseUrl":"/Users/jayqing/Areas/blog_example/typescript_example_site/","moduleResolution":100},"handbookOptions":{"errors":[],"noErrors":false,"noErrorsCutted":false,"noErrorValidation":false,"noStaticSemanticInfo":false,"showEmit":false,"keepNotations":false},"removals":[],"flagNotations":[],"virtualFiles":[{"offset":0,"filename":"index.ts","filepath":"/Users/jayqing/Areas/blog_example/typescript_example_site/index.ts","content":"import { createContentLoader } from 'vitepress'\n\ninterface FormattedDate {\n  raw: Date\n  formattedString: string\n}\n\ninterface ReadingTimeInfo {\n  minutes: number\n  words: number\n}\n\nexport interface Data {\n  url: string\n  frontmatter: Record<string, any>\n  excerpt?: string\n  created: FormattedDate\n  lastModified: FormattedDate\n  readingInfo: ReadingTimeInfo\n}\n\ndeclare const data: Data[]\nexport { data }\n\nfunction formatDate(raw: string): FormattedDate {\n  const date = new Date(raw)\n  return {\n    raw: date,\n    formattedString: date.toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'numeric',\n      day: 'numeric',\n    }),\n  }\n}\n\nfunction calculateReadingTime(text?: string): ReadingTimeInfo {\n  if (!text) {\n    return { minutes: 0, words: 0 }\n  }\n\n  const WORDS_PER_MINUTE_ZH = 400\n  const WORDS_PER_MINUTE_EN = 225\n  const BLOCKS_PER_MINUTE_CODE = 1\n\n  const content = text\n    .replace(/---[\\s\\S]*?---/, '') // Remove frontmatter\n    .replace(/<[\\s\\S]*?>/g, '') // Remove HTML tags\n\n  const countZh = content.match(/[\\u4E00-\\u9FA5]/g)?.length || 0\n  const countEn = content.match(/[a-z]/gi)?.length || 0\n  const countCodeBlocks = content.match(/```[\\s\\S]*?```/g)?.length || 0\n\n  const minutes = Math.ceil(countZh / WORDS_PER_MINUTE_ZH + countEn / WORDS_PER_MINUTE_EN + countCodeBlocks * BLOCKS_PER_MINUTE_CODE)\n\n  const words = Math.ceil((countZh + countEn) / 100) * 100\n\n  return {\n    minutes,\n    words,\n  }\n}\n\nexport default createContentLoader('posts/*.md', {\n  includeSrc: true,\n  excerpt: true,\n  transform(raw) {\n    return raw.map(({ url, frontmatter, excerpt, src }) => ({\n      url,\n      frontmatter,\n      excerpt,\n      created: formatDate(frontmatter.created),\n      lastModified: formatDate(frontmatter.last_modified),\n      readingInfo: calculateReadingTime(src),\n    }))\n  },\n})","extension":"ts","supportLsp":true}],"positionQueries":[],"positionCompletions":[],"positionHighlights":[]},"queries":[],"completions":[],"errors":[],"highlights":[],"hovers":[{"type":"hover","text":"(alias) function createContentLoader<T = ContentData[]>(pattern: string | string[], { includeSrc, render, excerpt: renderExcerpt, transform, globOptions }?: ContentOptions<T>): {\n    watch: string | string[];\n    load: () => Promise<T>;\n}\nimport createContentLoader","docs":"Create a loader object that can be directly used as the default export\nof a data loader file.","start":9,"length":19,"target":"createContentLoader","line":0,"character":9},{"type":"hover","text":"interface FormattedDate","start":59,"length":13,"target":"FormattedDate","line":2,"character":10},{"type":"hover","text":"(property) FormattedDate.raw: Date","start":77,"length":3,"target":"raw","line":3,"character":2},{"type":"hover","text":"interface Date","docs":"Enables basic storage and retrieval of dates and times.","start":82,"length":4,"target":"Date","line":3,"character":7},{"type":"hover","text":"(property) FormattedDate.formattedString: string","start":89,"length":15,"target":"formattedString","line":4,"character":2},{"type":"hover","text":"interface ReadingTimeInfo","start":126,"length":15,"target":"ReadingTimeInfo","line":7,"character":10},{"type":"hover","text":"(property) ReadingTimeInfo.minutes: number","start":146,"length":7,"target":"minutes","line":8,"character":2},{"type":"hover","text":"(property) ReadingTimeInfo.words: number","start":164,"length":5,"target":"words","line":9,"character":2},{"type":"hover","text":"interface Data","start":198,"length":4,"target":"Data","line":12,"character":17},{"type":"hover","text":"(property) Data.url: string","start":207,"length":3,"target":"url","line":13,"character":2},{"type":"hover","text":"(property) Data.frontmatter: Record<string, any>","start":221,"length":11,"target":"frontmatter","line":14,"character":2},{"type":"hover","text":"type Record<K extends keyof any, T> = { [P in K]: T; }","docs":"Construct a type with a set of properties K of type T","start":234,"length":6,"target":"Record","line":14,"character":15},{"type":"hover","text":"(property) Data.excerpt?: string | undefined","start":256,"length":7,"target":"excerpt","line":15,"character":2},{"type":"hover","text":"(property) Data.created: FormattedDate","start":275,"length":7,"target":"created","line":16,"character":2},{"type":"hover","text":"interface FormattedDate","start":284,"length":13,"target":"FormattedDate","line":16,"character":11},{"type":"hover","text":"(property) Data.lastModified: FormattedDate","start":300,"length":12,"target":"lastModified","line":17,"character":2},{"type":"hover","text":"interface FormattedDate","start":314,"length":13,"target":"FormattedDate","line":17,"character":16},{"type":"hover","text":"(property) Data.readingInfo: ReadingTimeInfo","start":330,"length":11,"target":"readingInfo","line":18,"character":2},{"type":"hover","text":"interface ReadingTimeInfo","start":343,"length":15,"target":"ReadingTimeInfo","line":18,"character":15},{"type":"hover","text":"const data: Data[]","start":376,"length":4,"target":"data","line":21,"character":14},{"type":"hover","text":"interface Data","start":382,"length":4,"target":"Data","line":21,"character":20},{"type":"hover","text":"(alias) const data: Data[]\nexport data","start":398,"length":4,"target":"data","line":22,"character":9},{"type":"hover","text":"function formatDate(raw: string): FormattedDate","start":415,"length":10,"target":"formatDate","line":24,"character":9},{"type":"hover","text":"(parameter) raw: string","start":426,"length":3,"target":"raw","line":24,"character":20},{"type":"hover","text":"interface FormattedDate","start":440,"length":13,"target":"FormattedDate","line":24,"character":34},{"type":"hover","text":"const date: Date","start":464,"length":4,"target":"date","line":25,"character":8},{"type":"hover","text":"var Date: DateConstructor\nnew (value: number | string | Date) => Date (+4 overloads)","start":475,"length":4,"target":"Date","line":25,"character":19},{"type":"hover","text":"(parameter) raw: string","start":480,"length":3,"target":"raw","line":25,"character":24},{"type":"hover","text":"(property) FormattedDate.raw: Date","start":500,"length":3,"target":"raw","line":27,"character":4},{"type":"hover","text":"const date: Date","start":505,"length":4,"target":"date","line":27,"character":9},{"type":"hover","text":"(property) FormattedDate.formattedString: string","start":515,"length":15,"target":"formattedString","line":28,"character":4},{"type":"hover","text":"const date: Date","start":532,"length":4,"target":"date","line":28,"character":21},{"type":"hover","text":"(method) Date.toLocaleDateString(locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string (+2 overloads)","docs":"Converts a date to a string by using the current or specified locale.","tags":[["param","locales A locale string, array of locale strings, Intl.Locale object, or array of Intl.Locale objects that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used."],["param","options An object that contains one or more properties that specify comparison options."]],"start":537,"length":18,"target":"toLocaleDateString","line":28,"character":26},{"type":"hover","text":"(property) Intl.DateTimeFormatOptions.year?: \"numeric\" | \"2-digit\" | undefined","start":573,"length":4,"target":"year","line":29,"character":6},{"type":"hover","text":"(property) Intl.DateTimeFormatOptions.month?: \"numeric\" | \"2-digit\" | \"long\" | \"short\" | \"narrow\" | undefined","start":596,"length":5,"target":"month","line":30,"character":6},{"type":"hover","text":"(property) Intl.DateTimeFormatOptions.day?: \"numeric\" | \"2-digit\" | undefined","start":620,"length":3,"target":"day","line":31,"character":6},{"type":"hover","text":"function calculateReadingTime(text?: string): ReadingTimeInfo","start":660,"length":20,"target":"calculateReadingTime","line":36,"character":9},{"type":"hover","text":"(parameter) text: string | undefined","start":681,"length":4,"target":"text","line":36,"character":30},{"type":"hover","text":"interface ReadingTimeInfo","start":697,"length":15,"target":"ReadingTimeInfo","line":36,"character":46},{"type":"hover","text":"(parameter) text: string | undefined","start":722,"length":4,"target":"text","line":37,"character":7},{"type":"hover","text":"(property) ReadingTimeInfo.minutes: number","start":743,"length":7,"target":"minutes","line":38,"character":13},{"type":"hover","text":"(property) ReadingTimeInfo.words: number","start":755,"length":5,"target":"words","line":38,"character":25},{"type":"hover","text":"const WORDS_PER_MINUTE_ZH: 400","start":779,"length":19,"target":"WORDS_PER_MINUTE_ZH","line":41,"character":8},{"type":"hover","text":"const WORDS_PER_MINUTE_EN: 225","start":813,"length":19,"target":"WORDS_PER_MINUTE_EN","line":42,"character":8},{"type":"hover","text":"const BLOCKS_PER_MINUTE_CODE: 1","start":847,"length":22,"target":"BLOCKS_PER_MINUTE_CODE","line":43,"character":8},{"type":"hover","text":"const content: string","start":883,"length":7,"target":"content","line":45,"character":8},{"type":"hover","text":"(parameter) text: string","start":893,"length":4,"target":"text","line":45,"character":18},{"type":"hover","text":"(method) String.replace(searchValue: {\n    [Symbol.replace](string: string, replaceValue: string): string;\n}, replaceValue: string): string (+3 overloads)","docs":"Passes a string and \n{@linkcode \nreplaceValue\n}\n to the `[Symbol.replace]` method on \n{@linkcode \nsearchValue\n}\n. This method is expected to implement its own replacement algorithm.","tags":[["param","searchValue An object that supports searching for and replacing matches within a string."],["param","replaceValue The replacement text."]],"start":903,"length":7,"target":"replace","line":46,"character":5},{"type":"hover","text":"(method) String.replace(searchValue: {\n    [Symbol.replace](string: string, replaceValue: string): string;\n}, replaceValue: string): string (+3 overloads)","docs":"Passes a string and \n{@linkcode \nreplaceValue\n}\n to the `[Symbol.replace]` method on \n{@linkcode \nsearchValue\n}\n. This method is expected to implement its own replacement algorithm.","tags":[["param","searchValue An object that supports searching for and replacing matches within a string."],["param","replaceValue The replacement text."]],"start":960,"length":7,"target":"replace","line":47,"character":5},{"type":"hover","text":"const countZh: number","start":1016,"length":7,"target":"countZh","line":49,"character":8},{"type":"hover","text":"const content: string","start":1026,"length":7,"target":"content","line":49,"character":18},{"type":"hover","text":"(method) String.match(matcher: {\n    [Symbol.match](string: string): RegExpMatchArray | null;\n}): RegExpMatchArray | null (+1 overload)","docs":"Matches a string or an object that supports being matched against, and returns an array\ncontaining the results of that search, or null if no matches are found.","tags":[["param","matcher An object that supports being matched against."]],"start":1034,"length":5,"target":"match","line":49,"character":26},{"type":"hover","text":"(property) Array<string>.length: number | undefined","docs":"Gets or sets the length of the array. This is a number one higher than the highest index in the array.","start":1061,"length":6,"target":"length","line":49,"character":53},{"type":"hover","text":"const countEn: number","start":1081,"length":7,"target":"countEn","line":50,"character":8},{"type":"hover","text":"const content: string","start":1091,"length":7,"target":"content","line":50,"character":18},{"type":"hover","text":"(method) String.match(matcher: {\n    [Symbol.match](string: string): RegExpMatchArray | null;\n}): RegExpMatchArray | null (+1 overload)","docs":"Matches a string or an object that supports being matched against, and returns an array\ncontaining the results of that search, or null if no matches are found.","tags":[["param","matcher An object that supports being matched against."]],"start":1099,"length":5,"target":"match","line":50,"character":26},{"type":"hover","text":"(property) Array<string>.length: number | undefined","docs":"Gets or sets the length of the array. This is a number one higher than the highest index in the array.","start":1117,"length":6,"target":"length","line":50,"character":44},{"type":"hover","text":"const countCodeBlocks: number","start":1137,"length":15,"target":"countCodeBlocks","line":51,"character":8},{"type":"hover","text":"const content: string","start":1155,"length":7,"target":"content","line":51,"character":26},{"type":"hover","text":"(method) String.match(matcher: {\n    [Symbol.match](string: string): RegExpMatchArray | null;\n}): RegExpMatchArray | null (+1 overload)","docs":"Matches a string or an object that supports being matched against, and returns an array\ncontaining the results of that search, or null if no matches are found.","tags":[["param","matcher An object that supports being matched against."]],"start":1163,"length":5,"target":"match","line":51,"character":34},{"type":"hover","text":"(property) Array<string>.length: number | undefined","docs":"Gets or sets the length of the array. This is a number one higher than the highest index in the array.","start":1189,"length":6,"target":"length","line":51,"character":60},{"type":"hover","text":"const minutes: number","start":1210,"length":7,"target":"minutes","line":53,"character":8},{"type":"hover","text":"var Math: Math","docs":"An intrinsic object that provides basic mathematics functionality and constants.","start":1220,"length":4,"target":"Math","line":53,"character":18},{"type":"hover","text":"(method) Math.ceil(x: number): number","docs":"Returns the smallest integer greater than or equal to its numeric argument.","tags":[["param","x A numeric expression."]],"start":1225,"length":4,"target":"ceil","line":53,"character":23},{"type":"hover","text":"const countZh: number","start":1230,"length":7,"target":"countZh","line":53,"character":28},{"type":"hover","text":"const WORDS_PER_MINUTE_ZH: 400","start":1240,"length":19,"target":"WORDS_PER_MINUTE_ZH","line":53,"character":38},{"type":"hover","text":"const countEn: number","start":1262,"length":7,"target":"countEn","line":53,"character":60},{"type":"hover","text":"const WORDS_PER_MINUTE_EN: 225","start":1272,"length":19,"target":"WORDS_PER_MINUTE_EN","line":53,"character":70},{"type":"hover","text":"const countCodeBlocks: number","start":1294,"length":15,"target":"countCodeBlocks","line":53,"character":92},{"type":"hover","text":"const BLOCKS_PER_MINUTE_CODE: 1","start":1312,"length":22,"target":"BLOCKS_PER_MINUTE_CODE","line":53,"character":110},{"type":"hover","text":"const words: number","start":1345,"length":5,"target":"words","line":55,"character":8},{"type":"hover","text":"var Math: Math","docs":"An intrinsic object that provides basic mathematics functionality and constants.","start":1353,"length":4,"target":"Math","line":55,"character":16},{"type":"hover","text":"(method) Math.ceil(x: number): number","docs":"Returns the smallest integer greater than or equal to its numeric argument.","tags":[["param","x A numeric expression."]],"start":1358,"length":4,"target":"ceil","line":55,"character":21},{"type":"hover","text":"const countZh: number","start":1364,"length":7,"target":"countZh","line":55,"character":27},{"type":"hover","text":"const countEn: number","start":1374,"length":7,"target":"countEn","line":55,"character":37},{"type":"hover","text":"(property) ReadingTimeInfo.minutes: number","start":1412,"length":7,"target":"minutes","line":58,"character":4},{"type":"hover","text":"(property) ReadingTimeInfo.words: number","start":1425,"length":5,"target":"words","line":59,"character":4},{"type":"hover","text":"(alias) createContentLoader<{\n    url: string;\n    frontmatter: Record<string, any>;\n    excerpt: string | undefined;\n    created: FormattedDate;\n    lastModified: FormattedDate;\n    readingInfo: ReadingTimeInfo;\n}[]>(pattern: string | string[], { includeSrc, render, excerpt: renderExcerpt, transform, globOptions }?: ContentOptions<...> | undefined): {\n    ...;\n}\nimport createContentLoader","docs":"Create a loader object that can be directly used as the default export\nof a data loader file.","start":1454,"length":19,"target":"createContentLoader","line":63,"character":15},{"type":"hover","text":"(property) ContentOptions<T = ContentData[]>.includeSrc?: boolean | undefined","docs":"Include src?","tags":[["default","false"]],"start":1492,"length":10,"target":"includeSrc","line":64,"character":2},{"type":"hover","text":"(property) ContentOptions<{ url: string; frontmatter: Record<string, any>; excerpt: string | undefined; created: FormattedDate; lastModified: FormattedDate; readingInfo: ReadingTimeInfo; }[]>.excerpt?: string | boolean | ((file: {\n    data: {\n        [key: string]: any;\n    };\n    content: string;\n    excerpt?: string;\n}, options?: any) => void) | undefined","docs":"If `boolean`, whether to parse and include excerpt? (rendered as HTML)\n\nIf `function`, control how the excerpt is extracted from the content.\n\nIf `string`, define a custom separator to be used for extracting the\nexcerpt. Default separator is `---` if `excerpt` is `true`.","tags":[["see","https://github.com/jonschlinkert/gray-matter#optionsexcerpt"],["see","https://github.com/jonschlinkert/gray-matter#optionsexcerpt_separator"],["default","false"]],"start":1512,"length":7,"target":"excerpt","line":65,"character":2},{"type":"hover","text":"(property) ContentOptions<{ url: string; frontmatter: Record<string, any>; excerpt: string | undefined; created: FormattedDate; lastModified: FormattedDate; readingInfo: ReadingTimeInfo; }[]>.transform?: ((data: ContentData[]) => {\n    url: string;\n    frontmatter: Record<string, any>;\n    excerpt: string | undefined;\n    created: FormattedDate;\n    lastModified: FormattedDate;\n    readingInfo: ReadingTimeInfo;\n}[] | Promise<...>) | undefined","docs":"Transform the data. Note the data will be inlined as JSON in the client\nbundle if imported from components or markdown files.","start":1529,"length":9,"target":"transform","line":66,"character":2},{"type":"hover","text":"(parameter) raw: ContentData[]","start":1539,"length":3,"target":"raw","line":66,"character":12},{"type":"hover","text":"(parameter) raw: ContentData[]","start":1557,"length":3,"target":"raw","line":67,"character":11},{"type":"hover","text":"(method) Array<ContentData>.map<{\n    url: string;\n    frontmatter: Record<string, any>;\n    excerpt: string | undefined;\n    created: FormattedDate;\n    lastModified: FormattedDate;\n    readingInfo: ReadingTimeInfo;\n}>(callbackfn: (value: ContentData, index: number, array: ContentData[]) => {\n    url: string;\n    frontmatter: Record<string, any>;\n    excerpt: string | undefined;\n    created: FormattedDate;\n    lastModified: FormattedDate;\n    readingInfo: ReadingTimeInfo;\n}, thisArg?: any): {\n    url: string;\n    frontmatter: Record<string, any>;\n    excerpt: string | undefined;\n    created: FormattedDate;\n    lastModified: FormattedDate;\n    readingInfo: ReadingTimeInfo;\n}[]","docs":"Calls a defined callback function on each element of an array, and returns an array that contains the results.","tags":[["param","callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array."],["param","thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value."]],"start":1561,"length":3,"target":"map","line":67,"character":15},{"type":"hover","text":"(parameter) url: string","start":1568,"length":3,"target":"url","line":67,"character":22},{"type":"hover","text":"(parameter) frontmatter: Record<string, any>","start":1573,"length":11,"target":"frontmatter","line":67,"character":27},{"type":"hover","text":"(parameter) excerpt: string | undefined","start":1586,"length":7,"target":"excerpt","line":67,"character":40},{"type":"hover","text":"(parameter) src: string | undefined","start":1595,"length":3,"target":"src","line":67,"character":49},{"type":"hover","text":"(property) url: string","start":1614,"length":3,"target":"url","line":68,"character":6},{"type":"hover","text":"(property) frontmatter: Record<string, any>","start":1625,"length":11,"target":"frontmatter","line":69,"character":6},{"type":"hover","text":"(property) excerpt: string | undefined","start":1644,"length":7,"target":"excerpt","line":70,"character":6},{"type":"hover","text":"(property) created: FormattedDate","start":1659,"length":7,"target":"created","line":71,"character":6},{"type":"hover","text":"function formatDate(raw: string): FormattedDate","start":1668,"length":10,"target":"formatDate","line":71,"character":15},{"type":"hover","text":"(parameter) frontmatter: Record<string, any>","start":1679,"length":11,"target":"frontmatter","line":71,"character":26},{"type":"hover","text":"any","start":1691,"length":7,"target":"created","line":71,"character":38},{"type":"hover","text":"(property) lastModified: FormattedDate","start":1707,"length":12,"target":"lastModified","line":72,"character":6},{"type":"hover","text":"function formatDate(raw: string): FormattedDate","start":1721,"length":10,"target":"formatDate","line":72,"character":20},{"type":"hover","text":"(parameter) frontmatter: Record<string, any>","start":1732,"length":11,"target":"frontmatter","line":72,"character":31},{"type":"hover","text":"any","start":1744,"length":13,"target":"last_modified","line":72,"character":43},{"type":"hover","text":"(property) readingInfo: ReadingTimeInfo","start":1766,"length":11,"target":"readingInfo","line":73,"character":6},{"type":"hover","text":"function calculateReadingTime(text?: string): ReadingTimeInfo","start":1779,"length":20,"target":"calculateReadingTime","line":73,"character":19},{"type":"hover","text":"(parameter) src: string | undefined","start":1800,"length":3,"target":"src","line":73,"character":40}],"tags":[]}